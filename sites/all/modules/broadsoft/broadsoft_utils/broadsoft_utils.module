<?php
include("broadsoft_utils.module.extra");
include("broadsoft_utils.common.module");

/*---------------------------------------------------------------------------------------
                                broadsoft_utils
                                    module

*** Description:

*** Notes:

---------------------------------------------------------------------------------------*/
define("XCHANGE_EMAIL", "xchange@broadsoft.com");
define("XCHANGESUPPORT_EMAIL", "xchangesupport@broadsoft.com");

define('FILEDEPOT_FOLDER_TYPE_MACHINE_NAME', 'filedepot_folder');


/** ============================================================================================= */
// @@@ eventually remove from elsewhere and only leave here
if(!function_exists("isXchange")) { function isXchange() { return preg_match('/xchange/i', bs_get_site_base_name()); } }
if(!function_exists("isD6")) { function isD6() { return preg_match('/xchange/i', bs_get_site_base_name()); } }
if(!function_exists("isD7")) { function isD7() { return !isD6(); } }

/** ===========================================================================
 * Returns an array element IF it is defined
 * Returns NULL or NulValRet otherwise
*/
function array_element($key , $array, $NulValRet=NULL) {
  if($array && is_array($array) && array_key_exists($key, $array))
    return $array[$key];
  return $NulValRet;
}

/** ===========================================================================
 * Detects developer PC running Windows
*/
function isPC() {
  return (array_key_exists('SystemRoot', $_SERVER) && preg_match('/C:.Windows/', $_SERVER['SystemRoot']));
}

/** ===========================================================================
 * Unless 100% sure, identify as NOT dev.
*/
function isDevServer() {
  if($host=array_element("HOSTNAME", $_SERVER)) {
    if(preg_match('/devxchangeserver\d[.]int[.]broadsoft[.]com/', $host)) // works fine on 10.1.1* and 174.122.85* boxes, browser & shell/cron modes
      return TRUE;
  }
  if((preg_match('/^10[.]/', ip_address()) || (ip_address()=='127.0.0.1')))
    return TRUE;

  if(isPC())
    return TRUE;

  return FALSE;
}

/** ===========================================================================
 * Detects our dev boxes: 10.1.1.xx
*/
function developmentMode() 	{
  return (isPC() || preg_match('/^10[.]/', ip_address()));
}

/* ======================================================================= */
function Add2Log($str2log) {
  $filename = DRUPAL_ROOT.'/logs/log.txt';

  // This is not portable xxx
  if(isPC()) {
    //$filename = 'd:\/delme\/log.txt';
  }

  if (file_put_contents($filename, $str2log, FILE_APPEND) === FALSE) {
    drupal_set_message(t('Add2Log was unable to write to %file.', array('%file' => $filename)), 'error');
    return FALSE;
  }
}

/* ======================================================================= */
function DebugPrintComplex($something, $title = "") {
  if(is_array($something) || is_object($something)) {
  	ob_start();
  	print_r($something);
  	$retStr = ob_get_contents();
  	ob_end_clean();
  	Add2Log("========================>> ".$title." vvvvvvvvvvvvvvvvvvvvvvvvvv\n");
  	Add2Log($retStr."\n");
  	Add2Log("========================>> ".$title." ^^^^^^^^^^^^^^^^^^^^^^^^^^\n");
  } else
    Add2Log($something."\n");
}

/* ======================================================================= */
function bsutil_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }

  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }

  return FALSE;
}

/** =======================================================================
 */
function userIsAdministrator() { return bsutil_user_has_role('administrator'); }

/** =======================================================================
 */
function bs_userIsBroadSoftEmployee($uid=0) {
  global $user;

  if($uid)
    $euser = user_load($uid);
  else
    $euser = $user;

  if(userIsAdministrator()) return true; // site mgr
  return in_array('BroadSoft Employee', array_values($euser->roles));
}

/* ======================================================================= */
function bs_get_site_base_name() {
  $RU = request_uri(); // e.g. /php/xchange2/node/472268
  $base_path = preg_replace('/\/php\//', '', $RU);
  $base_path = preg_replace('/\/.*/', '', $base_path);

  return $base_path;
}

/* =======================================================================
* Get the base path of the web site
**/
function bs_get_site_base_path() {
  global $base_url;
	return $base_url.'/';
}

/** =============================================================================================
taken from http://stackoverflow.com/questions/10490253/how-to-save-a-session-variable-in-drupal-7

to save a variable in Session:
  lists_session("s_key", "value");

And to retrieve the value, just use:
  $myVar = lists_session("s_key");

*/
function lists_session($key, $value = NULL) {
  static $storage;
  if ($value) {
    $storage[$key] = $value ;
    $_SESSION['lists'][$key] = $value ;   // I use 'lists' in case some other module uses 'type' in $_SESSION
  }
  else if (empty($storage[$key]) && isset($_SESSION['lists'][$key])) {
    $storage[$key] = $_SESSION['lists'][$key];
  }
  return $storage[$key];
}

/***********************************************************************************

  To save a variable against a user:
    user_data("s_key", "value");

  And to retrieve the value, just use:
    $myVar = user_data("s_key");

  Note: value can be an array (this fct always un-serializes values)

***********************************************************************************/
function user_data($key, $value = NULL) {
	global $user;
  if( !db_table_exists('user_data') ) {
    return null;
  }
  if ($value) {
    // insert into DB - delete before to prevent clash
    db_delete('user_data')
    ->condition('user_data.user_uid', $user->uid, '=')
    ->condition('user_data.type', $key, '=')
    ->execute();

    db_insert('user_data')
    ->fields(array(
      'user_uid' => $user->uid,
      'type' => $key,
      'data' => serialize($value),))
    ->execute();
  } else {
    // retreive from DB
    $record = db_select('user_data', 'user_data')
              ->fields('user_data', array('data'))
              ->condition('user_data.user_uid', $user->uid, '=')
              ->condition('user_data.type', $key, '=')
              ->execute()
              ->fetchAssoc();
    if($record && array_key_exists('data', $record))
      $value = unserialize($record['data']);
  }
  return $value;
}

/**
 ** ===========================================================================
 * Returns an Array of the form
 *      tablename    =>  array (row->val)
 */
function ExtractNodeData($fieldName, $fieldValue) {
  $resArr = array();
  $resultTables = db_query("SHOW TABLES");
  foreach ($resultTables as $rowTable) {
    $tableName = NULL;
    if(bsutil_isExtranetSite())
      $tableName = $rowTable->Tables_in_extranet; // implement for other sites if needed

    if($tableName && db_field_exists($tableName, $fieldName)) {
      $query = db_select(db_escape_table($tableName), 't');
      $DBResultSet = $query ->fields('t')
                            ->condition('t.'.$fieldName, $fieldValue, '=')
                            ->execute();
      if(!$DBResultSet)
        return NULL;//@@@

      // might be multiple rows
      foreach ($DBResultSet as $row) {
        $resArr[db_escape_table($tableName)][] = get_object_vars($row);
//@@@ if db_field_exists fid -> recall recursively this fct to extract fid data

      }
/* the following works: to be used someday in DB exploration
      $resultCols = db_query("SHOW COLUMNS FROM {". db_escape_table($tableName) ."}");
      foreach ($resultCols as $rowCol) {
        ;
      }
 */
    }
  }

  return $resArr;
}

/** =============================================================================================
*/
function bsutil_isExtranetSite() {
  // @@@ Need to make it configurable through GUI
  return preg_match('/extranet/', variable_get('broadsoft_site_ID'));
}

/** =============================================================================================
*/
function bsutil_isBumsSite() {
  // @@@ Need to make it configurable through GUI
  return preg_match('/bums/', variable_get('broadsoft_site_ID'));
}

/** =============================================================================================
*/
function bsutil_isXtendedSite() {
  // @@@ Need to make it configurable through GUI
  return preg_match('/xtended/', variable_get('broadsoft_site_ID'));
}

/** =============================================================================================
*/
function bsutil_isInteropSite() {
  // @@@ Need to make it configurable through GUI
  return preg_match('/interop/', variable_get('broadsoft_site_ID'));
}

/** =============================================================================================
*/
function bsutil_isCloudDashboardSite() {
  // @@@ Need to make it configurable through GUI
  return preg_match('/broadcloudDashboard/', variable_get('broadsoft_site_ID'));
}

/** =============================================================================================
*/
function bsutil_iscPBXSite() {
  // @@@ Need to make it configurable through GUI
  return preg_match('/cpbx/', variable_get('broadsoft_site_ID'));
}

/** =============================================================================================
* Validate some node type creation
*/
function broadsoft_utils_node_validate($node, $form, &$form_state) {
  if($node->type == ACCESS_GROUP_TYPE_MACHINE_NAME) {

    foreach($node->field_group_owners[$node->language] as $i => $ownerData) {
      // only allow Broadsoft employees as owners
      if(is_array($ownerData) && array_key_exists('target_id', $ownerData) && strlen($ownerData['target_id'])>0) {
        $ownerAccount = user_load($ownerData['target_id']);
        if($ownerAccount && $ownerAccount->name) {
          if(!preg_match('/@broadsoft.com$/', $ownerAccount->name))
            form_set_error('field', 'Owner must be, but is not, a Broadsoft employee: '.$ownerAccount->name.' ('.$ownerData['target_id'].')');
        }
      }
    }

    // On group creation, make sure LDAP Group Name gets created on the LDAP server
    $rootDirMangled = preg_replace('/\//', '', $node->field_disk_base_dir[$node->language][0]['value']);
    if(preg_match('/^BroadTouch$/', $rootDirMangled))
      form_set_error('field', t($node->field_disk_base_dir[$node->language][0]['value'].' is not allowed as Disk Base Dir.'));
    if(preg_match('/^BroadTouchbranded$/', $rootDirMangled))
      form_set_error('field', t($node->field_disk_base_dir[$node->language][0]['value'].' is not allowed as Disk Base Dir.'));
    if(preg_match('/^BroadTouchgeneric$/', $rootDirMangled))
      form_set_error('field', t($node->field_disk_base_dir[$node->language][0]['value'].' is not allowed as Disk Base Dir.'));
  }
  // @@@ enforce unicity?
}

/** =============================================================================================
 THE CLEAN WAY to do this would be through the OG api i.e. 2 lines below
 $values = array('entity_type' => 'node', 'entity' => $node);
 og_group('node', $gid, $values);

 HOWEVER it is not enough and after about 6 hours of hair pulling I GAVE UP.
 the db_insert directive done below is needed and saved my mental health.
 ** precision on nov 25 2013: direct updating of node_access is ONLY required if directly publishing i.e. $published==TRUE **

 Some explanations:
   Here are the DB diffs resulting from adding (normal GUI mode) a new node (nid=17) for group with gid=7
     INSERT INTO field_data_group_content_access VALUES ('node','document_discovered',0,17,17,'und',0,2);
     INSERT INTO field_revision_group_content_access VALUES ('node','document_discovered',0,17,17,'und',0,2);
     INSERT INTO node_access VALUES (17,7,'og_access:node',1,0,0);
     INSERT INTO og_membership VALUES (45,'og_membership_type_default',17,'node',7,'node','1',1382534784,'og_group_ref','en');

   Here are the diffs resulting from programatically doing a   og_group('node', $gid, $values);
     INSERT INTO field_data_group_content_access VALUES ('node','document_discovered',0,18,18,'und',0,2);
     INSERT INTO field_revision_group_content_access VALUES ('node','document_discovered',0,18,18,'und',0,2);
     INSERT INTO og_membership VALUES (46,'og_membership_type_default',18,'node',7,'node','1',1382535971,'og_group_ref','en');

   So, missing INSERT INTO node_access VALUES (17,7,'og_access:node',1,0,0);
   ... this explains the db_update on table node_access below
*/
function bsutils_associateNode2Group($node, $gid, $published) {
  if(bsutil_isExtranetSite()) {
    $values = array('entity_type' => 'node', 'entity' => $node);
    og_group('node', $gid, $values);
    if($published) {
      db_update('node_access')
      ->fields(array('gid' => $gid, 'realm' => 'og_access:node',))
      ->condition('nid', $node->nid)
      ->execute();
    }
    watchdog('BroadSoft Code', 'Associated node ('.$node->nid.') to organic group ('.$gid.')', NULL, WATCHDOG_DEBUG);
  }
}

/** =============================================================================================
                                  Applies to: EXTRANET only

  return: array
    ['ownerEmailList'] = "ownerEmail1,ownerEmail2";
    ['notifyOwners'] = TRUE or FALSE;
  */
function bsutil_getGroupOwnershipData($gid) {
  if(!bsutil_isExtranetSite())
    return NULL;

  $retData = array();

  $query = db_select('node', 'n');
  $query->join('field_data_field_group_owners', 't1', 't1.entity_id = n.nid');
  $query->join('field_data_field_notify_owners_file_updates', 't2', 't2.entity_id = n.nid');

  $DBResultSet = $query ->fields('t1', array('field_group_owners_target_id'))
                        ->fields('t2', array('field_notify_owners_file_updates_value'))
                        ->fields('n', array('nid'))
                        ->condition('n.nid', $gid, '=')
                        ->execute();

  if(!$DBResultSet)
    return NULL;

  // might be multiple rows in cases of multiple group owners
  $retData['ownerEmailList'] = "";
  $retData['notifyOwners'] = FALSE;
  $retData['ownerUIDList'] = array();
  foreach ($DBResultSet as $row) {
    $ownerEmail = bsutil_getMailFromUID($row->field_group_owners_target_id);
    if(strlen($ownerEmail)) {
      if(strlen($retData['ownerEmailList']))
        $retData['ownerEmailList'] .= ",";
      $retData['ownerEmailList'] .= $ownerEmail;
    }
    $retData['notifyOwners'] = $row->field_notify_owners_file_updates_value; // will be same on each iteration...
    $retData['ownerUIDList'][$ownerEmail] = $row->field_group_owners_target_id;
  }

  return $retData;
}

/** =============================================================================================
Applies to: EXTRANET only

return: array
['uses_filedepot'] = TRUE or FALSE;
['read_only_filedepot'] = TRUE or FALSE;
*/
function bsutil_getGroupFileDepotSettings($gid) {
  if(!bsutil_isExtranetSite())
    return NULL;

  $retData = array();

  $query = db_select('node', 'n');
  $query->join('field_data_field_uses_filedepot', 't1', 't1.entity_id = n.nid');
  $query->join('field_data_field_read_only_filedepot', 't2', 't2.entity_id = n.nid');

  $DBResultSet = $query ->fields('t1', array('field_uses_filedepot_value'))
  ->fields('t2', array('field_read_only_filedepot_value'))
  ->fields('n', array('nid'))
  ->condition('n.nid', $gid, '=')
  ->execute();

  if(!$DBResultSet)
    return NULL;

  // might be multiple rows in cases of multiple group owners
  $retData['uses_filedepot'] = FALSE;
  $retData['read_only_filedepot'] = FALSE;
  foreach ($DBResultSet as $row) {
    $retData['uses_filedepot'] = $row->field_uses_filedepot_value;
    $retData['read_only_filedepot'] = $row->field_read_only_filedepot_value;
  }

  return $retData;
}

/** =============================================================================================
  $bodyArray can/should be an array
    $bodyArray[0] = 'line 1 ...'
    $bodyArray[1] = 'line 2 ...'

  $rcptList can be a comma-separated list of emails e.g. "slapierre@broadsoft.com;clabarre@broadsoft.com"
*/
function bsutil_sendEmailNoAttachment($rcptList, $subject, $bodyArray) {
  watchdog('BroadSoft Code', 'Email sending for : '.$rcptList.' ['.$subject.']', NULL, WATCHDOG_DEBUG);
  if(!variable_get('broadsoft_utils_send_emails')) {
    watchdog('BroadSoft Code', 'Email sending is NOT enabled, aborting email sending. To change this: %> drush vset broadsoft_utils_send_emails 1', NULL, WATCHDOG_WARNING);
    return;
  }

  if(!is_array($bodyArray)) {
    $tmpArr = array();
    $tmpArr[] = $bodyArray;
    $bodyArray = $tmpArr;
  }
  $module = 'broadsoft_utils';
  $key = time();
  $language = language_default();
  $params = array();
  $from = XCHANGESUPPORT_EMAIL;
  $send = FALSE;
  $message = drupal_mail($module, $key, $rcptList, $language, $params, $from, $send);
  $message['subject'] = $subject;
  $message['body'] = $bodyArray;

  // Retrieve the responsible implementation for this message.
  $system = drupal_mail_system($module, $key);

  // Format the message body.
  $message = $system->format($message);

  // Send e-mail.
  $message['result'] = $system->mail($message);

  if($message['result']!=1)
    watchdog('BroadSoft Code', 'Email issue while sending to "'.$rcptList.'". Result is "'.$message['result'].'"', NULL, WATCHDOG_WARNING);

}

/** =============================================================================================
*/
function bsutil_getMailFromUID($uid) {
  $record = db_select('users', 't1')
            ->fields('t1', array('mail'))
            ->condition('t1.uid', $uid, '=')
            ->execute()
            ->fetchAssoc();
  if(!$record) {
    watchdog('BroadSoft Code', 'Cannot fetch mail from uid for uid ('.$uid.')', NULL, WATCHDOG_WARNING);
    return NULL;
  }
  return $record['mail'];
}

/** =============================================================================================
*/
function bsutil_getUIDFromMail($mail) {
    $record = db_select('users', 't1')
            ->fields('t1', array('uid'))
            ->condition('t1.mail', $mail, '=')
            ->execute()
            ->fetchAssoc();
  if(!$record) {
    watchdog('BroadSoft Code', 'Cannot fetch user from mail for mail ('.$mail.')', NULL, WATCHDOG_WARNING);
    return 0;
  }
  return $record['uid'];
}

/** =============================================================================================
* dumps any structure, array, object etc into a file
*/
function FileDumpComplex($something, $filename = '/var/broadworks/tmp/FileDumpComplex.out.txt') {
	ob_start();
	var_dump($something);
	$str2log=ob_get_contents();
	ob_end_clean();

	if($fhandle = fopen($filename, 'w')) {
		fwrite($fhandle, $str2log);
		fclose($fhandle);
	}
}

/*********************************************************************************
  Uses this code http://web.cmfolio.com/projects/rotator/docs/
  e.g. for termName = 'HomePageSlideshow'
*********************************************************************************/
function generateRotatingImages($imgTermName, $intervalMs=5000) {
  $retStr = "";
  drupal_add_js(drupal_get_path('module', 'broadsoft_utils') . '/js/rotator.js');
  drupal_add_css(drupal_get_path('module', 'broadsoft_utils') .'/css/rotatingBanner.css');

  $retStr .= '<div>';
  $retStr .= '<center>';
  $retStr .= '<ul id="rotatingImages" class="rotatingBanner loading">';

  if(isD6()) {
    // --- Drupal 6
    $result = db_query("SELECT n.nid FROM {node} n, {term_data} td, {term_node} tn where n.type='image' AND n.nid=tn.nid AND tn.tid=td.tid AND td.name='".$imgTermName."' AND n.status=1 ORDER BY changed DESC LIMIT 20");
    while($row = db_fetch_array($result)) {
      $imageNode = node_load($row['nid']);
      $targetURL = $imageNode->field_target_url[0]['url'];
      if($targetURL)
        $retStr .= '<a href="'.$targetURL.'" target="_blank">';
      $retStr .= '<li class="slide"><img src="'.bs_get_site_base_path().'image/view/'.$imageNode->nid.'/_original" alt="" /></li>';
      if($targetURL)
        $retStr .= '</a>';
    }
  } else {
    // --- Drupal 7
    $terms = taxonomy_get_term_by_name($imgTermName);
    if($terms) {
      $term = key($terms); // get key of first array element
      if ($nids = taxonomy_select_nodes($term)) {
        foreach($nids as $nid) {
          $imageNode = node_load($nid);
          $tmpTargetEl = array_element($imageNode->language, $imageNode->field_target_url);
          $targetURL = $tmpTargetEl?$tmpTargetEl[0]['value']:NULL;
          if($targetURL)
            $retStr .= '<a href="'.$targetURL.'" target="_blank">';
          $retStr .= '<li class="slide"><img src="'.file_create_url($imageNode->field_file[$imageNode->language][0]['uri']).'" alt="" /></li>';

          if($targetURL)
            $retStr .= '</a>';
        }
      }
    }
  }

  $retStr .= '</ul>';
  $retStr .= '</center>';
  $retStr .= '</div>';

  $rotatorObjStr = "
    jQuery(
      function($) {
        var config = {
          random: false,
          transition: 'fade',
          interval: ".$intervalMs.", // in mili seconds
          width: 960,
          height: 240,
          quickLoad: false
        };
        config.nav = {
          prev: true, // default: true
          next: true, // default: true
          start: false, // default: false
          stop: false, // default: false
          numbers: true, // default: true
          icons: false, // default: false
          position: 'inside',
        }
        window.rotator = $('#rotatingImages').rotator(config);
      }
    );
    ";
  drupal_add_js($rotatorObjStr, 'inline');

  return $retStr;
}

/** =============================================================================================
* ANOMALY CHECKER - MAIN FCT
*
* analysisLevel = [1, 2, 3]
*
* Returns:
* - TRUE = no anomaly detected
* - FALSE = some anomaly detected
* Also: $retStrArray will contain an array of analysis result strings
*/
define("HIGH_FREQUENCY_ANALYSIS", 1);   // typically: every minute
define("MED_FREQUENCY_ANALYSIS", 2);    // typically: every hour
define("LOW_FREQUENCY_ANALYSIS", 3);    // typically: every night
function broadsoft_utils_run_anomaly_checker($analysisLevel=LOW_FREQUENCY_ANALYSIS) {
  // @TODO: NEED to get the list of functions and call those which do _anomaly_check
  // i.e. define our own hooks. I am sure this is possible... otherwise we see a lot of fct dependencies below. Bad.
  // for now: hard-coded list
  $noAnomaly = TRUE;

  // run higher-levels always
  if($analysisLevel==LOW_FREQUENCY_ANALYSIS) {
    $noAnomaly = $noAnomaly && (function_exists(broadsoft_filedepot_anomaly_check)?broadsoft_filedepot_anomaly_check(LOW_FREQUENCY_ANALYSIS, $msgArray):TRUE);
    $noAnomaly = $noAnomaly && (function_exists(broadsoft_filedepot_anomaly_check)?broadsoft_filedepot_anomaly_check(MED_FREQUENCY_ANALYSIS, $msgArray):TRUE);
  } else  if($analysisLevel==MED_FREQUENCY_ANALYSIS) {
    $noAnomaly = $noAnomaly && (function_exists(broadsoft_filedepot_anomaly_check)?broadsoft_filedepot_anomaly_check(MED_FREQUENCY_ANALYSIS, $msgArray):TRUE);
  }
  $noAnomaly = $noAnomaly && (function_exists(broadsoft_filedepot_anomaly_check)?broadsoft_filedepot_anomaly_check(HIGH_FREQUENCY_ANALYSIS, $msgArray):TRUE);

  if(!$noAnomaly) {
    // email support
    bsutil_sendEmailNoAttachment(XCHANGESUPPORT_EMAIL, "Anomaly Checker - issues were found for site ID (".variable_get('broadsoft_site_ID').")", $msgArray);
  }
}

/** ============================================================================================= */
function bsutil_prepareDiscoveryMessage($action,$user_mail,$node,$file_object=null) {
  $msgArr = array();
  $link=$_SERVER['HTTP_ORIGIN'] .'/php/extranet/node/'.$node->nid;
  $portal=variable_get('broadsoft_site_ID');
  switch ($action) {
    case 'create':
      $msgArr[] =  'A new document was created by : '.$user_mail;
      break;
    case 'update':
      $msgArr[] =  'A document was modified by : '.$user_mail;
      break;
    case 'discover':
      $msgArr[] =  'A document was discovered by : '.$user_mail;
      break;
    case 'skipped':
      $msgArr[] =  'File duplication detected (same md5sum)';
      break;
    default:
      break;
  }

  $msgArr[] = 'Document <a href="'.$link.'">'.$node->title.' </a>';
  $msgArr[] = 'Node number:'.$node->nid;
  if (isset($file_object->filename)) {
    $size= BytesToSize($file_object->filesize);
    $msgArr[] = ' ';
    $msgArr[] = 'File uploaded: '. $file_object->filename .' (<i>'.$file_object->filemime.'</i> / '.$size.')';
  }

  $msgArr[] = ' ';
  $msgArr[] = '<i>Portal: '.$portal.'</i>';
  return $msgArr;
}

/** ============================================================================================= */
function BytesToSize($bytes) {

  if ($bytes > 0) {
    $unit = intval(log($bytes, 1024));
    $units = array('B', 'KB', 'MB', 'GB');

    if (array_key_exists($unit, $units) === true) {
      return sprintf('%d %s', $bytes / pow(1024, $unit), $units[$unit]);
    }
  }

  return $bytes;
}


/*********************************************************************************
 * $actionStr: command as it would be entered in a bash prompt by bwadmin, located under ~/UTILS
 **********************************************************************************/
function addDelayedBWADMINshellCmd($actionStr) {
  // TODO: check location for 'delayed_user_commands.cmds' file
  $filename = '/export/home/bwadmin/tmp/delayed_user_commands.cmds';

  if ($fhandle = fopen($filename, 'a')) {
    fwrite($fhandle, $actionStr . "\n");
    fclose($fhandle);
    return TRUE;
  }
  return FALSE;
}

if (!function_exists('glob_recursive')) {
  // Does not support flag GLOB_BRACE
  function glob_recursive($pattern, $flags = 0) {
    $files = glob($pattern, $flags);
    foreach (glob(dirname($pattern) . '/*', GLOB_ONLYDIR | GLOB_NOSORT) as $dir) {
      $files = array_merge($files, glob_recursive($dir . '/' . basename($pattern), $flags));
    }

    return $files;
  }
}

/**
 * Utility used to extract http get extra parameters into a key/pairs
 * Module 'broadworks_patch_advisor' calls this function.
 */
function bs_extractUrlParams($query_string) {
  $pairs = array();

  if (empty($query_string)) {
    return $pairs;
  }

  $query_string = str_replace('?', '', $query_string);  // Get rid of the ? because it will screw up the pairs
  $query_params = explode('&', $query_string);

  for ($i = 0; $i < count($query_params); $i++) {
    list($key, $value) = explode('=', $query_params[$i]);
    $pairs[$key] = $value;
  }

  return $pairs;
}

/** ===========================================================================
 * Cross mounts were removed in early 2015
 * This disables direct access to other server's file systems.
 * Because Drupal runs as user bworks, ssh rm do not work
 * The delete solution is now indirect, running as delayed bwadmin cron commands
 *
 * Module 'broadworks_patch_advisor' calls this function.
 */
function delete_file($filepath) {
  // TODO: check location for 'xrm.sh' file
  return addDelayedBWADMINshellCmd('/export/home/bwadmin/adminscripts/xrm.sh ' . $filepath);
}

/**
 *
 * @param string $filepath
 * @param string $subfolder
 *
 * @return string
 */
function bs_findDiskFiles($filepath, $subfolder = "", $sortByDate = FALSE) {
  $filename = basename($filepath);

  // some chars need to be escaped, because the find cmd expects it that way:
  // &
  $filename = preg_replace('/&/', '\&', $filename);     // might introduce double escaping
  $filename = preg_replace('/\\\\&/', '\&', $filename); // remove double escapes
  // (space)
  $filename = preg_replace('/ /', '\ ', $filename);     // might introduce double escaping
  $filename = preg_replace('/\\\\ /', '\ ', $filename); // remove double escapes

  // TODO: check location for 'xchangeRepos' file
  $cmdStr = "find /var/broadworks/xchangeRepos" . $subfolder . " -follow -type f";
  if (!empty($filepath)) {
    $cmdStr .= " -name " . $filename;
  }

  if ($sortByDate) {
    // Sort by reverse chronological order
    $cmdStr .= " -printf '%Ts\t%p\n' | sort -nr | cut -f2";
  }

  exec($cmdStr, $outputArr, $retValue);
  if (empty($outputArr)) {
    // TODO: check location for 'xchangeRepos' file
    $outputArr = glob_recursive("/var/broadworks/xchangeRepos" . $subfolder . "/*", GLOB_NOSORT);
  }

  return $outputArr;
}

function DebugPrint2($val, $verboseOverride = FALSE) {
  if ($verboseOverride || verbose()) {
    if (is_array($val)) {
      DebugPrintArrayRec2($val, $val, TRUE);
    }
    else //Add2Log(sprintf("[%s] %s\n", date("m/j H:i:s"), $val));
    {
      Add2Log(sprintf("[%s] %s\n", time(), $val));
    }
  }
}

function DebugPrintArrayRec2($arr, $keyCat = "", $verboseOverride = FALSE) {
  foreach ($arr as $key => $val) {
    if (is_array($val)) {
      DebugPrintArrayRec2($val, $keyCat . '.' . $key, $verboseOverride);
    }
    else {
      DebugPrint2(sprintf("<%-15s> => %s", $keyCat . '.' . $key, $val), $verboseOverride);
    }
  }
}

function verbose() {
  return FALSE;
}

/* =======================================================================
* Get the directory for user pictures
* @param
  @return dir path
* @see
**/
function bs_get_user_picture_directory()
{
	return base_path().'sites/default/files/pictures/';
}

function bs_make_thumb_pic_url($picUrl)
{
	return bs_get_user_picture_directory().'thumb/'.basename($picUrl);
}


define("PROFILING_STAT_ELAPSED", "Profiling-elapsed");
define("PROFILING_STAT_START", "Profiling-start");
define("PROFILING_STAT_DAILY_SUMMARY", "Profiling-daily-summary");
define("PROFILING_STAT___FUNCTION__", "function");
define("PROFILING_STAT___CUSTOM__", "custom");
define("PROFILING_STAT___SCOPE__", "scope");
define("PROFILING_STAT___SCOPE_ID__", "scopeID");
define("PROFILING_STAT_FIELD_ELAPSED", "elapsed");
define("PROFILING_STAT_FIELD_SUMMARY_CONTEXT_URI", "uri");
define("PROFILING_STAT_FIELD_CONTEXT_URI", "context_uri");

/**
 * PROFILER usage: can have a performance hit, so use ONLY in specific functions
 * $scopeID: use "function" to set the current fct scope; otherwise provide a scope name
 * return : current time in microseconds
 * opt.: put some marker in tmp DB table to say "in caller fct - start": put db marker if you think drupal might die within this call
 *
 * Example usage:
 * $startTimeMS = broadsoft_profiler_startTimer(true, "function"|"some-id", $broadsoft_profiler_id);
 * ...
 * fct body
 * ...
 * broadsoft_profiler_logElapsedTime($startTimeMS, "function"|"some-id", $broadsoft_profiler_id);
 */
function broadsoft_profiler_startTimer($useMarker = FALSE, $scopeID = PROFILING_STAT___FUNCTION__, &$statID) {
  $time_ms = microtime(TRUE);
  if ($useMarker) {
    // using stat table as temporary table. Should/could use something else i.e. a real temporary table; not session, as Apache might die
    if ($scopeID != PROFILING_STAT___FUNCTION__) {
      $statArr = array(
        PROFILING_STAT___SCOPE__ => PROFILING_STAT___CUSTOM__,
        PROFILING_STAT___SCOPE_ID__ => $scopeID,
        'timestamp' => time(),
      );
    }
    else {
      $callers = debug_backtrace();
      $callerFctName = $callers[1]['function']; // caller fct name
      $statArr = array(
        PROFILING_STAT___SCOPE__ => PROFILING_STAT___FUNCTION__,
        PROFILING_STAT___SCOPE_ID__ => $callerFctName,
        'timestamp' => time(),
      );
    }
    function_exists('broadsoft_statistics_addStat') && broadsoft_statistics_addStat(PROFILING_STAT_START, $statArr);
  }
  return $time_ms;
}

/**
 * PROFILER usage: can have a performance hit, so use ONLY in specific functions
 * opt.: remove marker in tmp DB table to say "in caller fct"
 */
function broadsoft_profiler_logElapsedTime($startTimeMS, $scopeID = PROFILING_STAT___FUNCTION__, $statID = NULL) {
  $time_ms = microtime(TRUE);

  if ($scopeID != PROFILING_STAT___FUNCTION__) {
    $statArr = array(
      PROFILING_STAT___SCOPE__ => PROFILING_STAT___CUSTOM__,
      PROFILING_STAT___SCOPE_ID__ => $scopeID,
      PROFILING_STAT_FIELD_ELAPSED => $time_ms - $startTimeMS,
    );
  }
  else {
    $callers = debug_backtrace();
    $callerFctName = $callers[1]['function']; // caller fct name
    $statArr = array(
      PROFILING_STAT___SCOPE__ => PROFILING_STAT___FUNCTION__,
      PROFILING_STAT___SCOPE_ID__ => $callerFctName,
      PROFILING_STAT_FIELD_ELAPSED => $time_ms - $startTimeMS,
    );
  }
  function_exists('broadsoft_statistics_addStat') && broadsoft_statistics_addStat(PROFILING_STAT_ELAPSED, $statArr);

  if ($statID) {
    db_delete('broadsoft_statistics')
      ->condition('type', PROFILING_STAT_START)
      ->condition('statid', $statID)
      ->execute();
  }
}

/** =======================================================================
 */
function curNodeIsCustomerAccount() {
  if (arg(0)=='node') {
    if(is_numeric(arg(1))) {
      $node = node_load(arg(1));
      return ($node->type == 'customer_account');
    }
  }
  return FALSE;
}

/** ===========================================================================
*/
function isHtml($string) {
  if ( $string != strip_tags($string) ) {
      return true; // Contains HTML
  }
  return false; // Does not contain HTML
}

/**
 * Custom block for header and navigation themed using tpl file in mantis theme
 * TODO fix : the block is dependent on mantis theme
 */

/**
 * Implements hook_block_info().
 */
function broadsoft_utils_block_info() {
  $blocks = array();
  $blocks['header_menu'] = array(
    'info' => t('Header with Search and Navigation'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function broadsoft_utils_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'header_menu':
      $block['subject'] = '';
      $block['content'] = _mantis_header_menu();
      break;
  }

  return $block;
}

function _mantis_header_menu() {
  global $user;
  $items = array();
  // get logo
  $items['logo'] = theme_get_setting('logo');
  $items['front_page'] = base_path();
  // get active menu from url
  $cpath = drupal_get_path_alias();
  $active_menu = 'none';
  // TODO handle which menu is active
  if(strstr($cpath, 'ticketing')) {
    $active_menu = 'active-ticketing';
  }
  else if(strstr($cpath, 'documentation')) {
    $active_menu = 'active-product';
  }
  else if(strstr($cpath, 'community')) {
    $active_menu = 'active-community';
  }
  else if(strstr($cpath, 'questioning')) {
    $active_menu = 'active-questioning';
  }
  else if(strstr($cpath, 'patchadvisor')) {
    $active_menu = 'active-download';
  }
  else if(strstr($cpath, 'training')) {
    $active_menu = 'active-training';
  }
  $items['active_menu_class'] = $active_menu;
  // search bar on header
  $items['search_form'] = drupal_get_form('search_form');
  // Customer Mode for those with permissions
  $masquerading = false;
  if(isset($_SESSION['masquerading']) && $_SESSION['masquerading'] == "1") {
    $masquerading = true;
    $items['masquerade-warning'] = t('You are now viewing the site as :user', array(':user' => $user->name));
  }
  if(user_access('masquerade as any user') || $masquerading) {
    $items['masquerade'] = drupal_get_form('masquerade_block_1');
  }
  return theme('mantis_header_menu', array('items' => $items));
}
