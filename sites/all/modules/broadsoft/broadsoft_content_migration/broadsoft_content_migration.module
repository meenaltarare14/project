<?php

define("BROADWORKS", 6);
define("PBX", 5);
$db = 'xchange';
define("XC_TAXO_AOI_ACCESS", 8);
define("XC_TAXO_BROADCLOUD_COMPONENT", 11);
define("XC_TAXO_BROADTOUCH_COMPONENT", 15);
define("XC_TAXO_BROADTOUCH_RELEASE", 17);
define("XC_TAXO_BROADWORKS_COMPONENT", 4);
define("XC_TAXO_BROADWORKS_OS", 7);
define("XC_TAXO_BROADWORKS_RELEASE", 3);
define("XC_TAXO_CONNECT_RELEASE", 20);
define("XC_TAXO_LOKI_RELEASE", 19);
define("XC_TAXO_SYNERGY", 13);

/**
 * Implements hook_menu().
 */
function broadsoft_content_migration_menu() {
  $items = array();

  $items['admin/content/broadsoft_migrate'] = array(
    'title' => 'BroadSoft Migrate',
    'description' => 'Manage importing of data into your Drupal site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadsoft_content_migration_dashboard'),
    'access arguments' => array('access content overview'),
    'access callback' => 'user_access',
    'file' => 'broadsoft_migrate_ui.pages.inc',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  $items["admin/content/broadsoft_migrate/complete/%"] = array(
    'page callback' => "broadsoft_migrate_execute_final",
    'page arguments' => array(4),
    'access arguments' => array('access filedepot'),
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Export a list of users as a CSV file.
 */
function broadsoft_batch_migrate($option = array()) {

  $num_operations = 10;

  // var_dump();die;
  $filename = "broadsoft_migrate_" . time() . ".csv";
  $temp_file_path = '';
  $temp_file_path = broadsoft_migrate_outputfile_create();
//  broadsoft_migrate_outputfile_write($temp_file_path, $output);
  // Fetch old content
  $old_content = broadsoft_migrate_get_old_content($option);

  if (!empty($old_content)) {
    $operations = array();
    $info = array(
      'total' => count($old_content),
      'filename' => $filename,
      'temp_file_path' => $temp_file_path,
      'return_url' => request_uri(),
      'options' => $option,
    );
    if (count($old_content) > $num_operations) {
      $content_chunk = array_chunk($old_content, $num_operations);
      foreach ($content_chunk as $nid => $node_info) {
        $operations[] = array(
          'broadsoft_migrate_batch_import',
          array(
            $info,
            $node_info,
          )
        );
      }
    }
    else {
      $operations[] = array(
        'broadsoft_migrate_batch_import',
        array(
          $info,
          $old_content,
        )
      );
    }

  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'broadsoft_migrate_batch_import_finished',
    'title' => t('Processing BroadSoft Content Import'),
    'init_message' => t('BroadSoft Content Import is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('BroadSoft content import has encountered an error.'),
  );

  $path = array($temp_file_path, $filename);
  $path_string = urlencode(base64_encode(serialize($path)));
  // batch_set & batch_process exits
  batch_set($batch);
  batch_process("admin/content/broadsoft_migrate/complete/$path_string");
}


/**
 * Batch process CRM events
 */
function broadsoft_migrate_batch_import($info, $nodes, &$context) {
  $context['results']['info'] = $info;
  foreach ($nodes as $nid => $node_info) {
    // Check if we already imported old nid.
    $query = db_select("field_data_field_xchange_nid", "old_nid");
    $query->fields('old_nid', array('entity_id'));
    $query->condition("old_nid.field_xchange_nid_value", $node_info->nid);
    $query->condition("old_nid.bundle", $info['options']['content_type']);
    $old_node = $query->execute()->fetchField();
    if ($old_node == 0) {
      if ($node_info->uid == 1) {
        $user_id = 1;
      }
      else {
        // Get the latest uid corresponding to the old node author uid
        $query = db_select("field_data_field_xchange_uid", "xchange_uid");
        $query->fields('xchange_uid', array('entity_id'));
//      $query->innerJoin("field_data_field_xchange_source", "xchange_source", "xchange_source.entity_id = xchange_uid.entity_id");
        $query->condition("xchange_uid.field_xchange_uid_value", $node_info->uid);
//      $query->condition("xchange_source.field_xchange_source_value", $db);
        $user_id = $query->execute()->fetchField();
        // Special case for Broadsoft Software.
        if (empty($user_id)) {
          $user_id = 1;
        }
      }
      if (!empty($user_id)) {
        // Fetch new tid values for categories
        $additional_info = array();
        if (isset($node_info->categories)) {
          $new_aoi_access = array();
          foreach ($node_info->categories as $tid => $vid) {
            $query = db_select("field_data_field_xchange_old_tid", "b");
            $query->fields('b', array('entity_id', 'bundle'));
            $query->condition("b.field_xchange_old_tid_value", $tid);
            switch ($vid) {
              case XC_TAXO_AOI_ACCESS:
                $query->condition("b.bundle", 'aoi_access');
                break;
              case XC_TAXO_BROADCLOUD_COMPONENT:
                $query->condition("b.bundle", 'broadcloud_component');
                break;
              case XC_TAXO_BROADTOUCH_COMPONENT:
                $query->condition("b.bundle", 'broadtouch_component');
                break;
              case XC_TAXO_BROADTOUCH_RELEASE:
                $query->condition("b.bundle", 'broadtouch_release');
                break;
              case XC_TAXO_BROADWORKS_COMPONENT:
                $query->condition("b.bundle", 'broadworks_component');
                break;
              case XC_TAXO_BROADWORKS_OS:
                $query->condition("b.bundle", 'broadworks_os');
                break;
              case XC_TAXO_BROADWORKS_RELEASE:
                $query->condition("b.bundle", 'broadworks_release');
                break;
              case XC_TAXO_CONNECT_RELEASE:
                $query->condition("b.bundle", 'connect_release');
                break;
              case XC_TAXO_LOKI_RELEASE:
                $query->condition("b.bundle", 'loki_release');
                break;
              case XC_TAXO_SYNERGY:
                $query->condition("b.bundle", 'synergy');
                break;
            }
            $new_tid = $query->execute()->fetchAssoc();
//          var_dump($new_tid);
            if ($new_tid) {
              $additional_info[$new_tid['bundle']][] = $new_tid['entity_id'];
            }
          }
        }
        $additional_info['new_uid'] = $user_id;
        $node_info = (object) array_merge((array) $node_info, $additional_info);
//      var_dump($node_info);
        $new_node = broadworks_create_bwp_node($node_info);
        broadsoft_migrate_outputfile_write($info['temp_file_path'], "{$new_node->title} old nid {$node_info->nid} and new nid {$new_node->nid}" . "\r\n");
      }
      else {
        broadsoft_migrate_outputfile_write($info['temp_file_path'], "No user found with uid {$node_info->uid}: OLD ID: {$node_info->nid}" . "\r\n");
      }
    }
    else {
//    var_dump($_GET);
      if ($info['options']['process_info'] == 'update') {
        $additional_info['new_nid'] = $old_node;
        $new_field_dependencies_nid = $new_inter_server_dependencies = '';
        // Fetch new nid for field_dependencies & field_inter_server_dependencies
        if (isset($node_info->field_dependencies)) {
          $additional_info['new_field_dependencies'] = array();
          if ($new_field_dependencies_nid = get_commons_node_id($node_info->field_dependencies)) {
            $additional_info['new_field_dependencies'] = array_values($new_field_dependencies_nid);
          }
        }

        if (isset($node_info->field_inter_server_dependencies)) {
          $additional_info['new_field_inter_server_dependencies'] = array();
          if ($new_inter_server_dependencies = get_commons_node_id($node_info->field_inter_server_dependencies)) {
            $additional_info['new_field_inter_server_dependencies'] = array_values($new_inter_server_dependencies);
          }
        }

        $node_info = (object) array_merge((array) $node_info, $additional_info);
//      var_dump($node_info);
        $updated_node = broadworks_create_bwp_node($node_info, TRUE);
        broadsoft_migrate_outputfile_write($info['temp_file_path'], "Node UPDATED with nid {$old_node}: OLD ID: {$node_info->nid}" . "\r\n");
      }
      else {
        broadsoft_migrate_outputfile_write($info['temp_file_path'], "Node already created with nid {$old_node}: OLD ID: {$node_info->nid}" . "\r\n");
      }

    }
  }
}


/**
 * Batch process finished
 * @param $success
 * @param $results
 * @param $operations
 */
function broadsoft_migrate_batch_import_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Successfully imported Old contents, result data added to file @filename .', array('@filename' => $results['info']['filename'])));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0],
      '@args' => print_r($error_operation[0], TRUE)
    )));
  }
}

function broadsoft_migrate_get_old_content($options = array()) {
  require_once DRUPAL_ROOT . '/sites/all/modules/broadsoft/broadsoft_content_migration/broadsoft_migrate.db.inc';
  $result = array();
  if (!empty($options)) {
    // change to old Database
    db_set_active($options['db']);

    $query = db_select("node", "n");
    //$query->distinct();
    $query->fields('n', array('nid', 'uid', 'title', 'created', 'changed'));
    $query->fields('nr', array('body', 'vid'));
    if ($options['content_type'] == 'broadworks_patch') {
      broadsoft_migrate_broadworks_patch_build_query($query);
    }
    $query->condition("n.status", 1);
    $query->condition("n.type", $options['content_type']);

    if (!empty($options['single_node'])) {
      $query->condition("n.nid", $options['single_node']);
    }
    $query->orderBy("nr.nid", "ASC");
    //$query->orderBy("nr.vid", "DESC");
//    $query->range(0, 10);
//    dpq($query);

    //$result = $query->countQuery()->execute()->fetchField(); //->fetchAllAssoc('nid');
    //var_dump($result);die;
    $result = $query->execute()->fetchAllAssoc('nid');
    if ($options['content_type'] == 'broadworks_patch') {
      broadsoft_migrate_broadworks_patch_build_result($result);
    }
    db_set_active('default');
  }

  return $result;
}

/**
 * Called on export initialization
 * Creates the output file, registers it as a temporary file with Drupal
 * and returns the fid
 */
function broadsoft_migrate_outputfile_create() {

  $dir = 'temporary://broadsoft_migrate';

  // Make sure the directory exists first.
  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    return broadsoft_migrate_abort_import(t('Could not create temporary directory for result export (@dir). Check permissions.', array('@dir' => $dir)));
  }

  $path = drupal_tempnam($dir, "broadsoft_migrate_import" . time());

  return $path;
}


/**
 * Write to the output file.
 */
function broadsoft_migrate_outputfile_write($output_file, $string) {
  if (file_put_contents($output_file, $string, FILE_APPEND) === FALSE) {
    return broadsoft_migrate_abort_import(t('Could not write to temporary output file for result export (@file). Check permissions.', array('@file' => $output_file)));
  }
  else {
    return TRUE;
  }
}

function broadsoft_migrate_abort_import($errors) {
  // Just cause the next batch to do the clean-up
  if (!is_array($errors)) {
    $errors = array($errors);
  }
  foreach ($errors as $error) {
    drupal_set_message($error . ' [' . t('Import Aborted') . ']', 'error');
  }
  return FALSE;
}

/**
 * Transfer the output file to the client.
 */
function broadsoft_migrate_transfer_file($path, $filename) {
  // unset($_SESSION['foodcycle_export']);
  // Set the headers.
  broadsoft_migrate_add_http_headers($filename);
  file_transfer($path, array());
}

/**
 * Renders the final page
 *  We should be free of the batch at this point
 */
function broadsoft_migrate_execute_final($arguments) {
  $info = unserialize(base64_decode(urldecode($arguments)));
  // Should we download the file.
  if (!empty($_GET['download'])) {
    // This next method will exit.
    broadsoft_migrate_transfer_file($info[0], $info[1]);
  }
  else {
    return broadsoft_migrate_complete_page($info[0], $info[1], $arguments);
  }
}

/**
 * Theme callback for the export complete page.
 *
 * @param $file
 *  Link to output file
 */
function broadsoft_migrate_complete_page($path, $filename, $encoded_params = '') {
  $query = array(
    'download' => 1,
  );

  $file = url("admin/content/broadsoft_migrate/complete/$encoded_params", array('query' => $query));
  drupal_set_title(t('Data export successful'));
  drupal_add_html_head(array(
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => "Refresh",
      'content' => '3;url=' . $file
    )
  ), 'broadsoft_migrate_import_download');
  $output = '';
  $output .= '<p>';
  $output .= t('Your export has been created. View/download the file <a href="@link">here</a> (will automatically download in 3 seconds.)', array('@link' => $file));
  $output .= '</p>';

  $output .= '<p>';
  $output .= l(t('Return to previous page'), 'admin/content/broadsoft_migrate');
  $output .= '</p>';

  return $output;
}

/**
 * Add any HTTP headers that this style plugin wants to.
 */
function broadsoft_migrate_add_http_headers($filename) {
  drupal_add_http_header('Cache-Control', 'max-age=60, must-revalidate');
  drupal_add_http_header('Content-type', 'text/csv; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename="' . $filename . '"');
}

function broadworks_create_bwp_node($node_info = '', $update = FALSE) {
  global $user;

  if ($update) {
    $entity = node_load($node_info->new_nid);
    $ewrapper = entity_metadata_wrapper('node', $entity);

    // field_dependencies
    // field_dependencies
    if (isset($node_info->new_field_dependencies) && !empty($node_info->new_field_dependencies)) {
      $ewrapper->field_dependencies->set($node_info->new_field_dependencies);
    }
    else {
      $ewrapper->field_dependencies = array();
    }

    // field_inter_server_dependencies
    if (isset($node_info->new_field_inter_server_dependencies) && !empty($node_info->new_field_inter_server_dependencies)) {
      $ewrapper->field_inter_server_dependencies->set($node_info->new_field_inter_server_dependencies);
    }
    else {
      $ewrapper->field_inter_server_dependencies = array();
    }

    if (!empty($node_info->body)) {
      $ewrapper->body->set(
        array(
          'value' => $node_info->body,
          'summary' => '',
          'format' => 'filtered_html',
        ));
    }
  }
  else {
    $values = array(
      'type' => 'broadworks_patch',
      'uid' => $node_info->new_uid,
      'status' => 1,
      'comment' => 2,
      'promote' => 0,
      'created' => $node_info->created,
      'updated' => $node_info->changed,
    );
    $entity = entity_create('node', $values);

    $ewrapper = entity_metadata_wrapper('node', $entity);

    $ewrapper->title->set($node_info->title);
    $ewrapper->revision->set(1);
    if (!empty($node_info->body)) {
      $ewrapper->body->set(
        array(
          'value' => $node_info->body,
          'summary' => '',
          'format' => 'filtered_html',
        ));
    }

    if (isset($node_info->broadworks_release)) {
      $ewrapper->field_broadworks_release->set($node_info->broadworks_release);
    }
    if (isset($node_info->broadworks_os)) {
      $ewrapper->field_broadworks_os->set($node_info->broadworks_os);
    }
    if (isset($node_info->aoi_access)) {
      $ewrapper->field_aoi_access->set($node_info->aoi_access);
    }
    if (isset($node_info->broadworks_component)) {
      $ewrapper->field_broadworks_component->set($node_info->broadworks_component);
    }

    $ewrapper->field_ev_ticket_id->set($node_info->field_ev_ticket_id_value);
    $ewrapper->field_ev_ticket_desc->set($node_info->field_ev_ticket_desc_value);
    // Starts Boolean fields
    $ewrapper->field_system_critical_patch->set($node_info->field_system_critical_patch_value == 'Y' ? 1 : 0);
    $ewrapper->field_schema_change->set($node_info->field_schema_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_update_binary->set($node_info->field_update_binary_value == 'Y' ? 1 : 0);
    $ewrapper->field_affects_portal_comp->set($node_info->field_affects_portal_comp_value == 'Y' ? 1 : 0);
    $ewrapper->field_restart_required->set($node_info->field_restart_required_value == 'Y' ? 1 : 0);

    $ewrapper->field_oci_schema_change->set($node_info->field_oci_schema_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_accounting_change->set($node_info->field_accounting_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_localization_changes->set($node_info->field_localization_changes_value == 'Y' ? 1 : 0);
    $ewrapper->field_help_change->set($node_info->field_help_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_oss_dtd_change->set($node_info->field_oss_dtd_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_snmp_restart_required->set($node_info->field_snmp_restart_required_value == 'Y' ? 1 : 0);
    $ewrapper->field_config_schema_change->set($node_info->field_config_schema_change_value == 'Y' ? 1 : 0);

    $ewrapper->field_cap_change->set($node_info->field_cap_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_sip_change->set($node_info->field_sip_change_value == 'Y' ? 1 : 0);
    $ewrapper->field_mgcp_change->set($node_info->field_mgcp_change_value == 'Y' ? 1 : 0);
    // Ends Boolean fields
    // field_dependencies will be added during update phase as this is an entity reference field it is referencing it itself.
    // Long Text Fields
    if (!empty($node_info->field_patched_files_value)) {
      $ewrapper->field_patched_files->set(
        array(
          'value' => $node_info->field_patched_files_value,
          'summary' => '',
          'format' => 'filtered_html',
        ));
    }
    $ewrapper->field_disposition->set($node_info->field_disposition_value);
    if (!empty($node_info->field_test_instructions_value)) {
      $ewrapper->field_test_instructions->set(
        array(
          'value' => $node_info->field_test_instructions_value,
          'summary' => '',
          'format' => 'filtered_html',
        ));
    }
    if (!empty($node_info->field_localization_details_value)) {
      $ewrapper->field_localization_details->set(
        array(
          'value' => $node_info->field_localization_details_value,
          'summary' => '',
          'format' => 'filtered_html',
        ));
    }
    // field_solaris_sparc_patch_file will be added at the end
    $ewrapper->field_solaris_sparc_patch_md5sum->set($node_info->field_solaris_sparc_patch_md5sum_value);
    // field_solaris_x86_patch_file will be added at the end
    $ewrapper->field_solaris_x86_patch_md5sum->set($node_info->field_solaris_x86_patch_md5sum_value);
    // field_linux_rh_patch_file  will be added at the end
    $ewrapper->field_linux_rh_patch_md5sum->set($node_info->field_linux_rh_patch_md5sum_value);
    $ewrapper->field_minimal_tool_version->set($node_info->field_minimal_tool_version_value);
    $ewrapper->field_target_application->set($node_info->field_target_application_value);
    if (!empty($node_info->field_post_install_message_value)) {
      $ewrapper->field_post_install_message->set(
        array(
          'value' => $node_info->field_post_install_message_value,
          'summary' => '',
          'format' => 'filtered_html',
        ));
    }
    $ewrapper->field_posted_date->set($node_info->field_posted_date_value);
//    if (!empty($node_info->field_posted_date_value)) {
//      $ewrapper->field_posted_date->set(
//        array(
//          'value' => $node_info->field_posted_date_value,
//          'timezone' => 'America/New_York',
//          'timezone_db' => 'UTC',
//          'date_type' => 'datestamp',
//        ));
//    }
    $ewrapper->field_pre_install_message->set($node_info->field_pre_install_message_value);
    // field_inter_server_dependencies will be added during update phase as this is an entity reference field it is referencing it itself.
    $ewrapper->field_upgrade_affecting->set(strlen($node_info->field_upgrade_affecting_value) != 0 ? $node_info->field_upgrade_affecting_value : '');
    // Old nid
    $ewrapper->field_xchange_nid->set($node_info->nid);

    // Files Manupulation
    // field_solaris_sparc_patch_file
    if ($node_info->fid) {
      $solaris_sparc_patch = get_file_object(get_xchange_file_object($node_info, 'field_solaris_sparc_patch_file'), $node_info->new_uid);
      $ewrapper->field_solaris_sparc_patch_file->set(
        array(
          'fid' => $solaris_sparc_patch->fid,
          'display' => 1,
          'description' => '',
        )
      );
    }
    // field_solaris_x86_patch_file
    if ($node_info->solaris_x86_patch_file_fid) {
      $solaris_x86_patch = get_file_object(get_xchange_file_object($node_info, 'field_solaris_x86_patch_file'), $node_info->new_uid);
      $ewrapper->field_solaris_x86_patch_file->set(
        array(
          'fid' => $solaris_x86_patch->fid,
          'display' => 1,
          'description' => '',
        )
      );
    }
    // field_linux_rh_patch_file
    if ($node_info->linux_rh_patch_file_fid) {
      $linux_rh_patch = get_file_object(get_xchange_file_object($node_info, 'field_linux_rh_patch_file'), $node_info->new_uid);
      $ewrapper->field_linux_rh_patch_file->set(
        array(
          'fid' => $linux_rh_patch->fid,
          'display' => 1,
          'description' => '',
        )
      );
    }
  }
  $ewrapper->save();
  return $entity;
}

function get_xchange_file_object($nodeinfo, $field_name) {
  if ($field_name == 'field_solaris_sparc_patch_file') {
    $file = new stdClass();
    $file->filename = $nodeinfo->filename;
    $file->filepath = $nodeinfo->filepath;
    $file->filemime = $nodeinfo->filemime;
    $file->filesize = $nodeinfo->filesize;
    $file->status = $nodeinfo->status;
  }

  if ($field_name == 'field_solaris_x86_patch_file') {
    $file = new stdClass();
    $file->filename = $nodeinfo->solaris_x86_patch_file_filename;
    $file->filepath = $nodeinfo->solaris_x86_patch_file_filepath;
    $file->filemime = $nodeinfo->solaris_x86_patch_file_filemime;
    $file->filesize = $nodeinfo->solaris_x86_patch_file_filesize;
    $file->status = $nodeinfo->solaris_x86_patch_file_status;
  }

  if ($field_name == 'field_linux_rh_patch_file') {
    $file = new stdClass();
    $file->filename = $nodeinfo->linux_rh_patch_file_filename;
    $file->filepath = $nodeinfo->linux_rh_patch_file_filepath;
    $file->filemime = $nodeinfo->linux_rh_patch_file_filemime;
    $file->filesize = $nodeinfo->linux_rh_patch_file_filesize;
    $file->status = $nodeinfo->linux_rh_patch_file_status;
  }

  return $file;
}

function get_file_object($xchange_file_info = '', $user_id) {
  $file_object = FALSE;
  if (!empty($xchange_file_info)) {
    $file_url = str_replace('/bw/broadworks/xchangeRepos', 's3://file-storage-100/xchange', $xchange_file_info->filepath);
    // existing file check
    $query = db_select('file_managed', 'f');
    $query->fields('f', array('fid'));
    $query->condition('uri', $file_url, '=');
    $file_id = $query->execute()->fetchField();
    if ($file_id) {
      $file_object = file_load($file_id);
    }
    else {
      $file_object = new stdClass;
      $file_object->uid = $user_id;
      $file_object->uri = $file_url;
      $file_object->filename = drupal_basename($file_url);;
      $file_object->filemime = file_get_mimetype($file_object->filename);
      $file_object->type = file_get_mimetype($file_object->filename);
      $file_object->filesize = $xchange_file_info->filesize;
      $file_object->status = $xchange_file_info->status;
      $file_object->timestamp = REQUEST_TIME;
      drupal_write_record('file_managed', $file_object);
      $file_object->display = 1;
    }
  }
  return $file_object;
}

function get_commons_node_id($old_nid) {
  if (is_array($old_nid)) {
    $query = db_select("field_data_field_xchange_nid", "old_nid");
    $query->fields('old_nid', array('entity_id'));
    $query->condition("old_nid.field_xchange_nid_value", $old_nid, "IN");
    $query->condition("old_nid.bundle", 'broadworks_patch');
    $new_nid = $query->execute()->fetchAllKeyed(0, 0);
    if ($new_nid) {
      return $new_nid;
    }
  }
  else {
    return FALSE;
  }
}