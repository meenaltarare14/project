<?php

function broadsoft_ticketing_menu() {
  $items = array();
  $items["ticketing/new-ticket"] = array(
    'title' => t('Broadsoft New Ticket'),
    'description' => t('Create a new Ticket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadsoft_new_ticket'),
    'access arguments' => array('access content'),
  );
  $items["ticketing/ticket/upload"] = array(
    'page callback' => 'upload_attachment',
    'access arguments' => array('access content'), // access is granted to everyone - BUT controlled in callback fct
    'type' => MENU_CALLBACK,
  );
  $items["ticketing/attachment"] = array(
    'page callback' => 'stream_attachment',
    'access arguments' => array('access content'), // access is granted to everyone - BUT controlled in callback fct
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function stream_attachment() {
  BTI_proxy_attachment();
}

function upload_attachment()
{
  if (isset($_FILES['files']['name']['dropzone'])) {
      // add to new ticket form
      $directory = 'public://TicketAttachments';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
      $file = file_save_upload('dropzone', array(), $directory);
      if($file != null)
        $_SESSION['ticket_attachments']['new'][$file->fid] = $file->filename;
      $fid = $file->fid;
    $count = count($_SESSION['ticket_attachments']['new']);
    echo drupal_json_encode(array('file' => $fid, 'fcount' => $count));
  }
  else if(isset($_FILES['files']['name']['edropzone'])) {
    // add to existing ticket form
    $directory = 'public://TicketAttachments';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    $file = file_save_upload('edropzone', array(), $directory);
    if($file != null)
      $_SESSION['ticket_attachments']['existing'][$file->fid] = $file->filename;
    $fid = $file->fid;
    $count = count($_SESSION['ticket_attachments']['existing']);
    echo drupal_json_encode(array('file' => $fid, 'fcount' => $count));
  }
  if(isset($_POST['delete_file'])) {
    $fid = $_POST['delete_file'];
    if(array_key_exists($fid, $_SESSION['ticket_attachments']['new'])) {
      unset($_SESSION['ticket_attachments']['new'][$fid]);
      $file = file_load($fid);
      file_delete($file);
      $count = count($_SESSION['ticket_attachments']['new']);
    }
    if(array_key_exists($fid, $_SESSION['ticket_attachments']['existing'])) {
      unset($_SESSION['ticket_attachments']['existing'][$fid]);
      $file = file_load($fid);
      file_delete($file);
      $count = count($_SESSION['ticket_attachments']['existing']);
    }
    echo drupal_json_encode(array('fcount' => $count));
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function broadsoft_ticketing_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

function jira_server_status() {
  // Jira server status
  $jiraR = $_SESSION['last_jira_response'];
  if(isset($jiraR['code']) && ($jiraR['code'] != 200 || $jiraR['error'])) {
    drupal_set_message('Unable to reach JIRA server! Please contact the administrator', 'warning');
    watchdog('broadsoft_ticketing', 'Unable to reach JIRA server! Response code:'.$jiraR['code'].' Error: '.$jiraR['error']);
    $_SESSION['last_jira_response'] = array();
  }
}

function broadsoft_new_ticket($form, &$form_state) {
  $form = ticketing_modal_form($form, $form_state, TRUE);
  return $form;
}

function ticketing_modal_form($form, &$form_state, $no_modal=FALSE){
  global $user;
  // Prerequsites
  $AssignedCustomerGroups = AssignedCustomerGroups($user, EDIT_GROUP_ACCESS);
  if(count($AssignedCustomerGroups)==0) {
    // error, in the CPBX world
    // drupal_set_message('You are not configured properly to create a ticket', 'error');
    $form['error'] = array(
      '#markup' => t('You are not configured properly to create a ticket'),
      '#prefix' => '<div class="ticket-error">',
      '#suffix' => '</div>',
      );
    return $form;
  }
  jira_server_status();
  /*if(!(userIsAdministrator()||bsutil_user_has_role(ROLE_TICKETING_ADMIN, $user)||bsutil_user_has_role(ROLE_TICKETING_VIEWER, $user)||bsutil_user_has_role(ROLE_TICKETING_EDITOR, $user)))  {
    drupal_set_message('You do not have permission to perform this action!', 'error');
    return NULL;
  }*/
  // Customer group
  $severityCriticalOnly = FALSE;
  $dfltNotificationListStr = NULL;
  if(count($AssignedCustomerGroups)==1) { // ==0 case already tested above
    reset($AssignedCustomerGroups); // otherwise key() below will return null
    $gid = key($AssignedCustomerGroups);
    $form['__cg__'] = array( '#type' => 'hidden', '#attributes' => array('id' => '__cg__'), '#value' => $gid);

    if(BTI_isCustomerGroupInHold($gid)) {
      $severityCriticalOnly = TRUE;
    }
  } else {
    // this should never occur in CPBX!!
    $gid2titles = array();
    foreach($AssignedCustomerGroups as $gid => $data) {
      $gid2titles[$gid] = $data['title'];
      if(BTI_isCustomerGroupInHold($gid)) {
        // remember as hidden form element - will limit severity options at validation time only
        $form['admin_hold_group_id_'.$gid] = array( '#type' => 'hidden', '#attributes' => array('id' => 'admin_hold_group_id_'.$gid), '#value' => true);
      }
    }
    reset($AssignedCustomerGroups);
    $gid = key($AssignedCustomerGroups);
    $productCategory = $AssignedCustomerGroups[$gid][ARRAY_FIELD_PRODUCT_CATEGORY];
    // create dropdown with customer-group options
    $form['cg'] = array(
      '#type' => 'select',
      '#title' => t('Customer Company/Group'),
      '#title_display' => 'invisible',
      '#access' => TRUE,
      '#options' => $gid2titles,
      '#prefix' => '<div class="select-style">',
      '#suffix' => '</div>',
      '#attributes' => array('class' => array('dropdown-toggle')),
      '#required' => TRUE,
      '#default_value' => reset($gid2titles),
      //'#empty_option' => t('Select Group'),
      '#ajax' => array(
        'callback' => 'customer_group_callback',
        'wrapper' => 'in-country',
      )
    );
  }
  $notifMapping = array();
  foreach(array_keys($AssignedCustomerGroups) as $_gid) {
    // build email list string for each possible groups - keep first one as default
    $tmpNotificationListArr = GetEndUsersAssociated2Group(array('gid' => $_gid, 'format' => 'array'));
    $tmpNotificationListStr = "";
    $tmpNotificationListStrDflt = "";
    // some error occured above: make empty array
    if(!is_array($tmpNotificationListArr)) $tmpNotificationListArr = array();
    foreach($tmpNotificationListArr as $email) {
      $tmpNotificationListStr .= $email."\\n";
      $tmpNotificationListStrDflt .= $email."\n";
    }
    if(!$dfltNotificationListStr) {
      $dfltNotificationListStr = $tmpNotificationListStrDflt;
    }
    $notifMapping[$_gid] = $tmpNotificationListStr;
    if(BTI_isCustomerGroupInHold($_gid)) {
      // remember as hidden form element - will limit severity options at validation time only
      $form['admin_hold_group_id_'.$_gid] = array( '#type' => 'hidden', '#value' => true);
    }
  }

  if (empty($form_state['severity'])) {
    $form_state['severity'] = '';
  }
  if (empty($form_state['critical_outage'])) {
    $form_state['critical_outage'] = FALSE;
  }
  if (empty($form_state['priority'])) {
    $form_state['priority'] = 'normal';
  }
  if($form_state['rebuild'] == false) {
    // Reset attachment array on form init
    // Some entries might be here on errors or
    // form cancel after attachment upload
    if(isset($_SESSION['ticket_attachments']['new']) && count($_SESSION['ticket_attachments']['new']) > 0) {
      $_SESSION['ticket_attachments']['new'] = array();
    }
  }
  $form['#tree'] = TRUE;
  $form['ticket_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Ticket Title'),
    '#placeholder' => t(''),
    '#maxlength' => 255,
    '#attributes' => array("class" => array("bsInputText", "")),
    '#required' => true,
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  //add autocomplete to title textfield
  $autocomplete_id = 'broadsoft_ticketing';
  $search = search_api_autocomplete_search_load($autocomplete_id);
  if ($search && $search->enabled) {
    $search->alterElement($form['ticket_title']);
  }
  // Severity content
  $form['severity'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['severity'],
  );
  $form['severity_tab'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="bsTabContent" id="severityWrapper">',
    '#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  switch($form_state['severity']) {
    case 'critical':
      if(!$form_state['critical_outage']) {
        $form['severity_tab']['souter'] = array(
          '#markup' => '<div class="bsBox bsBox_noPadding bsBox_color_critical">',
        );
        $form['severity_tab']['info'] = array(
          '#prefix' => '<div class="bsBox__notice bsBox__notice_color_critical">
                  <div class="bsBox__notice-text">',
          '#markup' => t('If you are experiencing a CRITICAL CALL OUTAGE, after creating this ticket, please call us immediately.') . "<br>" . t('If this is NOT AN OUTAGE please change severity to major.'),
          '#suffix' => '</div></div>'
        );
        $form['severity_tab']['not_outage'] = array(
          '#type' => 'submit',
          '#value' => t("Not an Outage"),
          '#name' => 'not_outage',
          '#attributes' => array('class' => array('ticket__submit', 'ticket__submit-text', 'ticket__submit_style_ghost', 'ticket__submit_width_224')),
          '#ajax' => array(
            'callback' => 'critical_no_outage_callback',
            'wrapper' => 'severityWrapper',
          ),
          '#submit' => array('critical_no_outage_submit'),
          '#prefix' => '<div class="ticket__submit-line">',
          '#limit_validation_errors' => array(),
        );
        $form['severity_tab']['outage'] = array(
          '#type' => 'submit',
          '#value' =>  t("Yes this is an Outage"),
          '#name' => 'outage',
          '#attributes' => array('class' => array('ticket__submit', 'ticket__submit-text', 'ticket__submit_width_224')),
          '#ajax' => array(
            'callback' => 'critical_outage_callback',
            'wrapper' => 'severityWrapper',
          ),
          '#submit' => array('critical_outage_submit'),
          '#suffix' => '</div>',
          '#limit_validation_errors' => array(),
        );
        $form['severity_tab']['eouter'] = array(
          '#markup' => '</div>',
        );
      }
      else {
        $form['severity_tab']['outage'] = array(
          '#markup' => get_outage_markup(),
        );
      }
      break;
    case 'major':

      break;
    case 'minor':
      $form['severity_tab']['souter'] = array(
        '#markup' => '<div class="bsBox bsBox_align_center bsBox_color_minor">',
      );
      $form['severity_tab']['info'] = array(
        '#prefix' => '<h3 class="bsBox__title bsBox__title_color_minor">',
        '#markup' => t('Most Minor issues can be answered by the Community.'),
        '#suffix' => '</h3>'
      );
      $form['severity_tab']['post'] = array(
        '#prefix' => '<div><i class="fa fa-users" aria-hidden="true"></i><span>',
        '#markup' => '<a href="#">'.t('Post this issue to the Community').'</a>',
        '#suffix' => '</span></div>'
      );
      $form['severity_tab']['continue'] = array(
        '#type' => 'button',
        '#value' => t('Continue Creating a Ticket...'),
        '#ajax' => array(
          'callback' => 'continue_ticket_callback',
          'wrapper' => 'severityWrapper',
        ),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
        '#limit_validation_errors' => array(),
      );
      $form['severity_tab']['eouter'] = array(
        '#markup' => '</div>',
      );
      break;
    case 'informational':
      $form['severity_tab']['souter'] = array(
        '#markup' => '<div class="bsBox bsBox_align_center bsBox_color_informational">',
      );
      $form['severity_tab']['info'] = array(
        '#prefix' => '<h3 class="bsBox__title bsBox__title_color_informational">',
        '#markup' => t('Most informational issues can be answered by the Community.'),
        '#suffix' => '</h3>'
      );
      $form['severity_tab']['post'] = array(
        '#prefix' => '<div><i class="fa fa-users" aria-hidden="true"></i><span>',
        '#markup' => '<a href="#">'.t('Post this issue to the Community').'</a>',
        '#suffix' => '</span></div>'
      );
      $form['severity_tab']['continue'] = array(
        '#type' => 'button',
        '#value' => t('Continue Creating a Ticket...'),
        '#ajax' => array(
          'callback' => 'continue_ticket_callback',
          'wrapper' => 'severityWrapper',
        ),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
        '#limit_validation_errors' => array(),
      );
      $form['severity_tab']['eouter'] = array(
        '#markup' => '</div>',
      );
      break;
  }
  // Ticket severity
  // Critical tab
  $form['critical'] = array(
    '#type' => 'submit',
    '#title' => t('Critical'),
    '#value' => '',
    '#name' => 'critical',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_severity_callback',
      'wrapper' => 'severityWrapper',
    ),
    '#submit' => array('ticket_severity_submit'),
    '#limit_validation_errors' => array(),
  );
  // Major tab
  $form['major'] = array(
    '#type' => 'submit',
    '#title' => t('Major'),
    '#value' => '',
    '#name' => 'major',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_severity_callback',
      'wrapper' => 'severityWrapper',
    ),
    '#submit' => array('ticket_severity_submit'),
    '#limit_validation_errors' => array(),
  );
  // Minor tab
  $form['minor'] = array(
    '#type' => 'submit',
    '#title' => t('Minor'),
    '#value' => '',
    '#name' => 'minor',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_severity_callback',
      'wrapper' => 'severityWrapper',
    ),
    '#submit' => array('ticket_severity_submit'),
    '#limit_validation_errors' => array(),
  );
  // Informational tab
  $form['informational'] = array(
    '#type' => 'submit',
    '#title' => t('Informational'),
    '#value' => '',
    '#name' => 'informational',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_severity_callback',
      'wrapper' => 'severityWrapper',
    ),
    '#submit' => array('ticket_severity_submit'),
    '#limit_validation_errors' => array(),
  );

  BTI_getAllowedCustomerPriorityOptions();
  // Ticket Priority
  $form['priority'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['priority'],
  );
  // Urgent tab
  $form['urgent'] = array(
    '#type' => 'submit',
    '#title' => t('Urgent'),
    '#value' => '',
    '#name' => 'urgent',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_priority_callback',
      'wrapper' => 'priorityWrapper',
    ),
    '#submit' => array('ticket_priority_submit'),
    '#limit_validation_errors' => array(),
  );
  // High tab
  $form['high'] = array(
    '#type' => 'submit',
    '#title' => t('High'),
    '#value' => '',
    '#name' => 'high',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_priority_callback',
      'wrapper' => 'priorityWrapper',
    ),
    '#submit' => array('ticket_priority_submit'),
    '#limit_validation_errors' => array(),
  );
  // Normal tab
  $form['normal'] = array(
    '#type' => 'submit',
    '#title' => t('Normal'),
    '#value' => '',
    '#name' => 'normal',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_priority_callback',
      'wrapper' => 'priorityWrapper',
    ),
    '#submit' => array('ticket_priority_submit'),
    '#limit_validation_errors' => array(),
  );
  // Low tab
  $form['low'] = array(
    '#type' => 'submit',
    '#title' => t('Low'),
    '#value' => '',
    '#name' => 'low',
    '#attributes' => array('class' => array('inside-button')),
    '#ajax' => array(
      'callback' => 'ticket_priority_callback',
      'wrapper' => 'priorityWrapper',
    ),
    '#submit' => array('ticket_priority_submit'),
    '#limit_validation_errors' => array(),
  );
  // Ticket details
  $form['ticket_details'] = array(
    '#type' => 'textarea',
    '#title' => t('Ticket Details'),
    '#placeholder' => t('Include a detailed description of your issue here...'),
    '#attributes' => array('class' => array("bsTextarea")),
    '#title_display' => 'invisible',
    '#required' => true,
  );
  $form['ticket_details_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Ticket Details'),
    '#id' => 'ticket_details_text',
    '#placeholder' => t('Include a detailed description of your issue here...'),
    '#attributes' => array('class' => array("bsTextarea-hidden", "element-invisible")),
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  drupal_add_js("
    jQuery(document).ready(
      function() {
      jQuery('.bsTextarea').keyup(function(){
        jQuery('.bsTextarea-hidden').val(jQuery('.bsTextarea').val());
        jQuery('.bsTextarea-hidden').trigger('keyup');
      });
      }
    );
  ", 'inline');
  //add autocomplete to details textarea
  $autocomplete_id = 'broadsoft_ticketing';
  $search = search_api_autocomplete_search_load($autocomplete_id);
  if ($search && $search->enabled) {
    $search->alterElement($form['ticket_details_text']);
  }

  // Product Information
  $form['product_information'] = array(
    '#type' => 'fieldset',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  //product selection
  $form['product_information']['product'] = array(
    '#type' => 'fieldset',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#prefix' => '<div class="product-infor-block2-dropdowngroup">',
    '#suffix' => '</div>',
  );

  // TODO filter product category based on user group
  $product_main = array(BTI_GetAllowedOptions('PRODUCT_MAIN', null, $productCategory));
  $form['product_information']['product']['product_select'] = array(
    '#type' => 'select',
    '#title' => t('Select Product'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => array_shift($product_main),
    '#prefix' => '<div class="select-style">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#required' => TRUE,
    '#empty_option' => t('Select Product'),
    '#ajax' => array(
      'callback' => 'main_product_select_callback',
      'wrapper' => 'product-solution',
    ),
  );
  if(isset($form_state['main_product']) && $form_state['main_product']!= NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['product']['product_select'] != $form_state['main_product']) {
      // the value is changed
      // unset dependant values
      $product_category = NULL;
      $version = NULL;
      $component = NULL;
      unset($form_state['values']['product_information']['product']['solution']);
      unset($form_state['values']['product_information']['product']['version']);
      unset($form_state['values']['product_information']['product']['component_select']);
      unset($form_state['values']['product_information']['component']['system']);
      unset($form_state['values']['product_information']['component']['platform']);
    }
  }
  $main_product = isset($form_state['values']['product_information']['product']['product_select']) ? $form_state['values']['product_information']['product']['product_select'] : NULL;
  $form_state['main_product'] = $main_product;
  $form['product_information']['product']['solution'] = array(
    '#type' => 'select',
    '#title' => t('Select Solution'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => ($main_product != NULL) ? BTI_GetAllowedOptions('PRODUCT_CATEGORY', $main_product, $productCategory) : array(),
    '#prefix' => '<div class="select-style" id="product-solution">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#required' => TRUE,
    '#empty_option' => t('Select Solution'),
    '#ajax' => array(
      'callback' => 'product_solution_select_callback',
    ),
  );
  if(isset($form_state['product_category']) && $form_state['product_category'] != NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['product']['solution'] != $form_state['product_category']) {
      // the value is changed
      // unset dependant values
      $version = NULL;
      $component = NULL;
      unset($form_state['values']['product_information']['product']['version']);
      unset($form_state['values']['product_information']['product']['component_select']);
      unset($form_state['values']['product_information']['component']['system']);
      unset($form_state['values']['product_information']['component']['platform']);
    }
  }
  $product_category = isset($form_state['values']['product_information']['product']['solution']) ? $form_state['values']['product_information']['product']['solution'] : NULL;
  $form_state['product_category'] = $product_category;
  $form['product_information']['product']['component_select'] = array(
    '#type' => 'select',
    '#title' => t('Select Component'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => ($product_category != NULL) ? BTI_GetAllowedOptions('COMPONENT', $product_category, $productCategory) : array(),
    '#prefix' => '<div class="select-style sub-category" id="component">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#states' => array(
      'enabled' => array(
        ':input[name="product_information[product][version]"]' => array('!value' => '')
      ),
    ),
    '#empty_option' => t('Select Component'),
    '#ajax' => array(
      'callback' => 'component_select_callback',
      'wrapper' => 'product-version',
    ),
  );
  if(isset($form_state['component']) && $form_state['component'] != NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['product']['component_select'] != $form_state['component']) {
      // the value is changed
      // unset dependant values
      $version = NULL;
      unset($form_state['values']['product_information']['product']['version']);
      unset($form_state['values']['product_information']['component']['platform']);
    }
  }
  $component = isset($form_state['values']['product_information']['product']['component_select']) ? $form_state['values']['product_information']['product']['component_select'] : NULL;
  if($component == NULL) $solution = isset($form_state['values']['product_information']['product']['solution']) ? $form_state['values']['product_information']['product']['solution'] : NULL;
  if($component != NULL) {
    $options = array(BTI_GetAllowedOptions(TICKETING_API_RELEASE, $component, $productCategory));
  }
  else if($solution != NULL) {
    $options = array(getVersionsFromSolution($solution));
  }
  else {
    $options = array();
  }
  $form_state['component'] = $component;
  $form['product_information']['product']['version'] = array(
    '#type' => 'select',
    '#title' => t('Select Version'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => $options,
    '#prefix' => '<div class="select-style" id="product-version">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#empty_option' => t('Select Version'),
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="product_information[product][product_select]"]' => array('!value' => '')
      ),
      'enabled' => array(
        ':input[name="product_information[product][solution]"]' => array('!value' => '')
      ),
    ),
    '#ajax' => array(
      'callback' => 'product_version_select_callback',
      'wrapper' => 'platform'
    ),
  );
  $form['product_information']['component'] = array(
    '#type' => 'fieldset',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#prefix' => '<div class="product-infor-block2-dropdowngroup">',
    '#suffix' => '</div>',
  );

  $form['product_information']['component']['system'] = array(
    '#type' => 'select',
    '#title' => t('Select System Type'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => ($product_category != NULL) ? BTI_GetAllowedOptions('SYSTEM_TYPE', $product_category, $productCategory) : array(),
    '#prefix' => '<div class="select-style" id="system-type">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#empty_option' => t('Select System Type'),
    '#states' => array(
      'visible' => array(
        ':input[name="product_information[component][component_select]"]' => array('!value' => '', '!value' => NOT_AN_OPTION_ID)
      ),
    ),
  );
  if(isset($form_state['version']) && $form_state['version'] != NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['product']['version'] != $version) {
      // the value is changed
      // unset dependant values
      unset($form_state['values']['product_information']['product']['platform']);
    }
  }
  $version = isset($form_state['values']['product_information']['product']['version']) ? $form_state['values']['product_information']['product']['version'] : NULL;
  $form_state['version'] = $version;
  $form['product_information']['component']['platform'] = array(
    '#type' => 'select',
    '#title' => t('Select Platform'),
    '#title_display' => 'invisible',
    '#options' => ($version != NULL) ? BTI_GetAllowedOptions(TICKETING_API_PLATFORM, $version, $productCategory) : array(),
    '#prefix' => '<div class="select-style" id="platform">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#access' => TRUE,
    '#empty_option' => t('Select Platform'),
    '#states' => array(
      'visible' => array(
        ':input[name="product_information[component][component_select]"]' => array('!value' => '',  '!value' => NOT_AN_OPTION_ID)
      ),
      'enabled' => array(
        ':input[name="product_information[component][system]"]' => array('!value' => '')
      ),
    ),
  );
  // Hide dropdowns that do not have any options(yet)
  if (empty($form_state['values']['product_information']['product']['product_select'])) {
    $form['product_information']['product']['solution']['#attributes']['class'] = array('element-hidden');
  }
  if (empty($form_state['values']['product_information']['product']['version'])) {
    $form['product_information']['component']['platform']['#attributes']['class'] = array('element-hidden');
  }
  if (empty($form_state['values']['product_information']['product']['solution'])) {
    $form['product_information']['product']['component_select']['#attributes']['class'] = array('element-hidden');
    $form['product_information']['component']['system']['#disabled'] = TRUE;
  }
  if(empty($form_state['values']['product_information']['product']['solution'])) {
    $form['product_information']['product']['version']['#attributes']['class'] = array('element-hidden');
  }
  if(empty($form['product_information']['component']['platform']['#options'])) {
    $form['product_information']['component']['platform']['#attributes']['class'] = array('element-hidden');
  }

  // Problem category
  $form['product_information']['category'] = array(
    '#type' => 'select',
    '#mutiple' => FALSE,
    '#attributes' => array('class' => array('problem-category-items'), 'size' => 14),
    '#options' => BTI_GetAllowedOptions(TICKETING_API_PROBLEM_CATEGORY, null, $productCategory)//array('3G Mobile Integration / Tango', 'Billing', 'Billing / CDR', 'Brandwing', 'BroadWorksIMS (XS)', 'Bug / Reliability / Error / Failure', 'Business Trunking', 'Call Center Call Routing/ACD', 'Call Center Report Inaccurate', 'Call Center Reporting Data Loss', 'Call Control / OCI-C', 'Call Dropped', 'Call DTMF', 'Call Echo', 'Call Log Management', 'Call Processing', 'Call Quality / Quality of Service', 'Call Quality/Echo/Jitter', 'Call Recording', 'Call Recording / Lawful Intercept', 'Call Reporting', 'Call Routing/Control', 'Call Routing/Processing', 'Conferencing / CS / MeetMe', 'Configuration / Feature Usage', 'Custom Development', 'Dashboard', 'Database / Replication / TT', 'Device Management', 'Disconnect', 'Documentation', 'Equipment', 'Faulty Order', 'Fax/T38', 'Feature Request / Suggestion', 'Fraud', 'Hardware / OS Related', 'IM', 'IM and Presence', 'IM, Presence, and File Transfer', 'IMS', 'Information / Maintenance', 'Interop - MGCP', 'Interop - SCCP', 'Interop - SIP', 'Interop - Third Party', 'Lawful Intercept', 'Licensing'),
  );

  // File upload form
  // Using dropzone js
  drupal_add_js(array('broadsoft_ticketing' => array('upload_path' => base_path().'ticketing/ticket/upload')), array('type' => 'setting'));
  $form['attachments'] = array(
    '#type' => 'container',
    '#title_display' => 'hidden',
    '#name' => 'adropzone',
    '#theme_wrappers' => array('dropzone_attachment_container'),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'broadsoft_ticketing').'/js/dropzone.js' => array('type' => 'file'),
      )
    ),
  );

  // Contact preferences form
  $account = user_load($user->uid);
  $phone_nb = '';
  $full_name = property_exists($account, 'field_full_name')?$account->field_full_name['und'][0]['value']:'';

  if(property_exists($account, 'field_telephone_number') && array_key_exists(LANGUAGE_NONE, $account->field_telephone_number) && array_key_exists(0, $account->field_telephone_number[LANGUAGE_NONE]) && array_key_exists('value', $account->field_telephone_number[LANGUAGE_NONE][0])) {
    $phone_nb = $account->field_telephone_number[LANGUAGE_NONE][0]['value'];
  }
  $form['contact_preferences'] = array(
    '#type' => 'fieldset',
    //'#prefix' => '<span class="desc-text">'.t('Populated from your profile settings.').'</span><div class="col-sm-6">',
    //'#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  $form['contact_preferences']['cname'] = array(
    '#type' => 'textfield',
    '#title' => t('Customer Name'),
    '#maxlength' => 255,
    '#attributes' => array("class" => array("form-control"), "id" => array("cus-name")),
    '#required' => true,
    '#default_value' => $full_name,
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  $form['contact_preferences']['contact_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Customer Contact Number'),
    '#maxlength' => 255,
    '#attributes' => array("class" => array("form-control"), "id" => array("cus-contact")),
    '#required' => true,
    '#default_value' => $phone_nb,
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  $form['contact_preferences']['ext_tracking_num'] = array(
    '#type' => 'textfield',
    '#title' => t('External Tracking Number'),
    '#maxlength' => 255,
    '#attributes' => array("class" => array("form-control"), "id" => array("tracking_numb")),
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  // In country
  if(isset($form['__cg__'])) {
    $gid = $form['__cg__']['#value'];
  }
  else {
    $gid = isset($form_state['values']['cg']) ? $form_state['values']['cg'] : null;
    if($gid==null) {
      $gid = key($gid2titles);
    }
  }
  $showInCountryDD = false;
  if($gid) {
    $optArr = buildInCountryArray($AssignedCustomerGroups[$gid]);
    if (sizeof($optArr) > 1) {
      $showInCountryDD = true;
    } elseif (sizeof($optArr) == 1) {
      // only show if is not 'none'
      if (reset($optArr) != 'none') { // using reset because the first element id is not 0. Ref http://stackoverflow.com/questions/1921421/get-the-first-element-of-an-array
        $showInCountryDD = true;
      }
    }
  }
  $form['contact_preferences']['in_country'] = array(
    '#type' => 'fieldset',
    '#title' => t('In-Country Support'),
    '#prefix' => '<div id="in-country">',
    '#suffix' => '</div>',
    '#theme_wrappers' => array(),
    //'#title_display' => 'hidden',
  );
  if($showInCountryDD) {
      $form['contact_preferences']['in_country']['select'] = array(
        '#type' => 'select',
        '#title' => t('In-Country Support'),
        '#options' => $optArr,
        '#attributes' => array("class" => array("form-control"), "id" => array("")),
        //'#title_display' => 'hidden',
        //'#theme_wrappers' => array(),
      );
   }
  $form['contact_preferences']['recipient_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Notification Recipient List'),
    '#attributes' => array("class" => array("email-list")),
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#default_value' => $dfltNotificationListStr,
  );
  $form['close'] = array(
    '#type' => 'submit',
    '#value' => '',
    '#name' => 'close',
    '#attributes' => array('class' => array('bsModal__close'), 'data-dismiss' => 'modal', 'aria-hidden' => 'true'),
    '#ajax' => array(
      'callback' => 'reset_ticket_callback',
      'wrapper' => 'ticket',
    ),
    '#submit' => array('reset_ticket_form_submit'),
    '#limit_validation_errors' => array(),
  );

  if(isset($form_state['saved_ticket'])) {
    $form['thank_you'] = array(
      '#type' => 'fieldset',
      '#theme_wrappers' => array('ticket_submit_message'),
    );
    $form['thank_you']['created_tid'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['saved_ticket'],
    );
    $form['thank_you']['severity_level'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['severity'],
    );
    if($form_state['saved_ticket'] != -1) {
      $form['thank_you']['close_b'] = array(
        '#type' => 'submit',
        '#value' => t('Close'),
        '#name' => 'closeb',
        '#attributes' => array('class' => array('ticket__submit', 'ticket__submit-text'), 'data-dismiss' => 'modal', 'aria-hidden' => 'true'),
        '#ajax' => array(
          'callback' => 'reset_ticket_callback',
          'wrapper' => 'ticket',
        ),
        '#submit' => array('reset_ticket_form_submit'),
        '#limit_validation_errors' => array(),
      );
    }
  }

  drupal_add_js(
    '(function ( $ ) {
    Drupal.ajax.prototype.commands.closeTicketModal = function(ajax, response, status) {
      $("#contentRating").modal("hide");
      $("body").removeClass("modal-open");
      $(".modal-backdrop").remove();
    }
    Drupal.ajax.prototype.commands.reinitTicketModal = function(ajax, response, status) {
      $("select#edit-product-information-product-product-select").find("option:eq(0)").prop("selected", true);
      $("select#edit-product-information-category option:selected").prop("selected", false);
      $("#severityWrapper").empty();
      $("#ticket .bsInputText").val("");
      $(".form-item-ticket-details textarea.bsTextarea").val("");
    }
    }( jQuery ));',
    'inline'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Submit Your Ticket"),
    '#attributes' => array('class' => array('ticket__submit', 'ticket__submit', 'ticket__submit_disabled', 'ticket__submit-text')),
    '#ajax' => array(
      'callback' => 'new_ticket_callback',
      'wrapper' => 'new-ticket',
    ),
    '#submit' => array('ticketing_modal_form_submit'),
  );

  if(empty($form['contact_preferences']['in_country']['select']['#options'])) {
    $form['contact_preferences']['in_country']['#attributes']['class'] = array('element-hidden');
  }

  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'broadsoft_ticketing').'/js/broadsoft_ticketing.js' => array('type' => 'file'),
    )
  );

  if($no_modal) {
    $form['#theme'][] = 'ticketing_no_modal_form';
  }
  else {
    $form['#theme'][] = 'ticketing_modal_form';
  }

  return $form;
}

function reset_ticket_callback($form, &$form_state) {
  $commands = array();
  if($form_state['rebuild']) {
    $commands[] = array("command" => 'closeTicketModal');
    $commands[] = ajax_command_replace('#ticketing-modal-form', drupal_render($form));
    $commands[] = array("command" => 'reinitTicketModal');
    if($form_state['reload_view']) {
      $commands[] = views_refresh_ajax_command_refresh("#open .view-ticketing-dashboard");
      $commands[] = views_refresh_ajax_command_refresh("#mytickets .view-ticketing-dashboard");
    }
    drupal_add_js(array('broadsoft_ticketing' => array('reload_dropzone' => TRUE)), array('type' => 'setting'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }
  else {
    $commands[] = array("command" => 'closeTicketModal');
    return array('#type' => 'ajax', '#commands' => $commands);
  }
}

function reset_ticket_form_submit($form, &$form_state) {
  // if ticket is created and closed, reset form
  if(isset($form_state['saved_ticket'])) {
    unset($form_state['saved_ticket']);
    $form_state['values'] = array();
    $form_state['component'] = NULL;
    $form_state['product_category'] = NULL;
    $form_state['main_product'] = NULL;
    $form_state['version'] = NULL;
    $form_state['rebuild'] = TRUE;
    $form_state['reload_view'] = TRUE;
  }
  else {
    // reset form anyway
    $form_state['values'] = array();
    $form_state['component'] = NULL;
    $form_state['product_category'] = NULL;
    $form_state['main_product'] = NULL;
    $form_state['version'] = NULL;
    $form_state['rebuild'] = TRUE;
    $form_state['reload_view'] = FALSE;
  }
}

function main_product_select_callback($form, &$form_state) {
  //return $form['product_information']['product']['solution'];
  $commands = array();
  $commands[] = ajax_command_replace('#product-solution', render($form['product_information']['product']['solution']));
  $commands[] = ajax_command_replace('#component', render($form['product_information']['product']['component_select']));
  $commands[] = ajax_command_replace('#system-type', render($form['product_information']['component']['system']));
  $commands[] = ajax_command_replace('#product-version', render($form['product_information']['product']['version']));
  $commands[] = ajax_command_replace('#platform', render($form['product_information']['component']['platform']));
  $commands[] = array("command" => 'resize_pcategory',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function product_solution_select_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#component', render($form['product_information']['product']['component_select']));
  $commands[] = ajax_command_replace('#system-type', render($form['product_information']['component']['system']));
  $commands[] = ajax_command_replace('#product-version', render($form['product_information']['product']['version']));
  $commands[] = ajax_command_replace('#platform', render($form['product_information']['component']['platform']));
  $commands[] = array("command" => 'resize_pcategory',);
  $commands[] = array("command" => 'autoselectSingles',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function component_select_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#product-version', render($form['product_information']['product']['version']));
  $commands[] = ajax_command_replace('#platform', render($form['product_information']['component']['platform']));
  $commands[] = array("command" => 'resize_pcategory',);
  $commands[] = array("command" => 'autoselectSingles',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function product_version_select_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#platform', render($form['product_information']['component']['platform']));
  $commands[] = array("command" => 'resize_pcategory',);
  $commands[] = array("command" => 'autoselectSingles',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ticket_severity_callback($form, &$form_state)
{
  $severity = $form_state['triggering_element']['#name'];
  $commands = array();
  //reset severity
  $commands[] = ajax_command_invoke('#ticket-critical', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-major', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-minor', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-informational', 'removeClass', array('bsTab_actived'));
  //set active severity
  $commands[] = ajax_command_invoke('#ticket-'.$severity, 'addClass', array('bsTab_actived'));
  if($severity == 'major') {
    $commands[] = ajax_command_invoke('#priorityAvailability', 'removeClass', array('notAvailable'));
    $commands[] = ajax_command_invoke('#productInformation', 'removeClass', array('notAvailable'));
    $commands[] = ajax_command_invoke('#detailsAvailability', 'removeClass', array('notAvailable'));
    $commands[] = ajax_command_invoke('#moreInfoAvailability', 'removeClass', array('notAvailable'));
    $commands[] = ajax_command_invoke('#submitAvailability', 'removeClass', array('notAvailable'));
    $commands[] = ajax_command_invoke('#cgroupAvailability', 'removeClass', array('notAvailable'));
  }
  $commands[] = ajax_command_replace("#severityWrapper", drupal_render($form['severity_tab']));
  $commands[] = array("command" => 'resize_pcategory',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ticket_severity_submit($form, &$form_state)
{
  $form_state['severity'] = $form_state['triggering_element']['#name'];
  $form_state['critical_outage'] = FALSE;
  $form_state['rebuild'] = TRUE;
}

function critical_outage_callback($form, &$form_state)
{
  $commands = array();
  $commands[] = ajax_command_replace("#severityWrapper", drupal_render($form['severity_tab']));
  $commands[] = ajax_command_invoke('#priorityAvailability', 'removeClass', array('notAvailable'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function critical_outage_submit($form, &$form_state)
{
  $form_state['severity'] = 'critical';
  $form_state['critical_outage'] = TRUE;
  $form_state['rebuild'] = TRUE;
}

function critical_no_outage_callback($form, &$form_state)
{
  $commands = array();
  $commands[] = ajax_command_replace("#severityWrapper", drupal_render($form['severity_tab']));
  $commands[] = ajax_command_invoke('#ticket-critical', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-major', 'addClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#priorityAvailability', 'removeClass', array('notAvailable'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function critical_no_outage_submit($form, &$form_state)
{
  $form_state['severity'] = 'major';
  $form_state['critical_outage'] = FALSE;
  $form_state['rebuild'] = TRUE;
}

function continue_ticket_callback($form, &$form_state) {
  $commands = array();
  //reset severity tab
  $form['severity_tab'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="bsTabContent" id="severityWrapper">',
    '#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  $commands[] = ajax_command_invoke('#priorityAvailability', 'removeClass', array('notAvailable'));
  $commands[] = ajax_command_invoke('#productInformation', 'removeClass', array('notAvailable'));
  $commands[] = ajax_command_invoke('#detailsAvailability', 'removeClass', array('notAvailable'));
  $commands[] = ajax_command_invoke('#moreInfoAvailability', 'removeClass', array('notAvailable'));
  $commands[] = ajax_command_invoke('#submitAvailability', 'removeClass', array('notAvailable'));
  $commands[] = ajax_command_invoke('#cgroupAvailability', 'removeClass', array('notAvailable'));
  $commands[] = ajax_command_replace("#severityWrapper", drupal_render($form['severity_tab']));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ticket_priority_callback($form, &$form_state)
{
  $priority = $form_state['triggering_element']['#name'];
  $commands = array();

  //reset severity
  $commands[] = ajax_command_invoke('#ticket-urgent', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-high', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-normal', 'removeClass', array('bsTab_actived'));
  $commands[] = ajax_command_invoke('#ticket-low', 'removeClass', array('bsTab_actived'));
  //set active severity
  $commands[] = ajax_command_invoke('#ticket-'.$priority, 'addClass', array('bsTab_actived'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ticket_priority_submit($form, &$form_state)
{
  $form_state['priority'] = $form_state['triggering_element']['#name'];
  $form_state['rebuild'] = TRUE;
}

function customer_group_callback($form, &$form_state) {
  return $form['contact_preferences']['in_country'];
}

function new_ticket_callback($form, &$form_state)
{
  $commands = array();
  $errors = form_get_errors();
  if ($errors) {
    // reset errors
    $commands[] = ajax_command_invoke('.modal-dialog .ticket .bsInputTextWrapper_hasRemain', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('.modal-dialog .ticket .bsTextareaWrapper', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('.product-infor-block2-dropdowngroup:last', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('.product-infor-block2-dropdowngroup:first', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('#cus-contact', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('#moreInfoAvailability > div > div:nth-child(3)', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('#cus-name', 'removeClass', array('error'));
    $commands[] = ajax_command_invoke('.form-item-cg', 'removeClass', array('error'));
    //set error messages
    $commands[] = ajax_command_replace('#form-errors', get_form_error_markup());
    foreach($errors as $key => $e) {
      if($key == 'ticket_title') {
        $commands[] = ajax_command_invoke('.modal-dialog .ticket .bsInputTextWrapper_hasRemain', 'addClass', array('error'));
      }
      if($key == 'ticket_details') {
        $commands[] = ajax_command_invoke('.modal-dialog .ticket .bsTextareaWrapper', 'addClass', array('error'));
      }
      if(strpos($key, 'product_information][product') !== false) {
        $commands[] = ajax_command_invoke('.product-infor-block2-dropdowngroup:first', 'addClass', array('error'));
      }
      if(strpos($key, 'product_information][component') !== false) {
        $commands[] = ajax_command_invoke('.product-infor-block2-dropdowngroup:last', 'addClass', array('error'));
      }
      if(strpos($key, 'contact_preferences][contact_num') !== false) {
        $commands[] = ajax_command_invoke('#cus-contact', 'addClass', array('error'));
        $commands[] = ajax_command_invoke('#moreInfoAvailability > div > div:nth-child(3)', 'addClass', array('error'));
      }
      if(strpos($key, 'contact_preferences][cname') !== false) {
        $commands[] = ajax_command_invoke('#cus-name', 'addClass', array('error'));
        $commands[] = ajax_command_invoke('#moreInfoAvailability > div > div:nth-child(3)', 'addClass', array('error'));
      }
      if($key == 'cg') {
        $commands[] = ajax_command_invoke('.form-item-cg', 'addClass', array('error'));
      }
    }
  } else {
    $commands[] = ajax_command_replace("#ticket-messages", drupal_render($form['thank_you']));
    $commands[] = ajax_command_invoke("#ticket", 'addClass', array('element-hidden'));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ticketing_modal_form_submit($form, &$form_state) {
  global $user;

  $severity_name = array(
    'critical' => 'CRITICAL',
    'major' => 'HIGH',
    'minor' => 'MEDIUM',
    'informational' => 'LOW',
  );
  $priority_name = array (
    'urgent' => '1 - Urgent',
    'high' => '2 - High',
    'normal' => '3 - Normal',
    'low' => '4 - Low',
  );
  // General
  $title = $form_state['values']['ticket_title'];
  $severity = $severity_name[$form_state['values']['severity']];
  $priority = $priority_name[$form_state['values']['priority']];
  $details = $form_state['values']['ticket_details'];
  // Product info
  $product_main = $form_state['values']['product_information']['product']['product_select'];
  $product_solution = $form_state['values']['product_information']['product']['solution'];
  $version = $form_state['values']['product_information']['product']['version'];
  $component = $form_state['values']['product_information']['product']['component_select'];
  $system = $form_state['values']['product_information']['component']['system'];
  $platform = $form_state['values']['product_information']['component']['platform'];
  $problem_category = $form_state['values']['product_information']['category'];
  // Contact preferences
  $customer_name = $form_state['values']['contact_preferences']['cname'];
  $contact_num = $form_state['values']['contact_preferences']['contact_num'];
  $ext_tracking_num = $form_state['values']['contact_preferences']['ext_tracking_num'];
  $recipient_list = $form_state['values']['contact_preferences']['recipient_list'];
  // fill user profile data if required
  $profileUpdated = FALSE;
  $account = user_load($user->uid);
  $full_name = property_exists($account, 'field_full_name')?$account->field_full_name['und'][0]['value']:'';
  $LDAPIntegration = NULL;

  // if full name change: save local + LDAP
  if( $full_name != $customer_name) {
    $full_name = $customer_name;
    $updatedFields = array();
    $updatedFields['field_full_name'][LANGUAGE_NONE][0]['value'] = $full_name;
    user_save($account, $updatedFields);
    // drupal_set_message('Customer Contact Name updated to: '.$full_name, 'notice');
    if(!$LDAPIntegration) {
      $LDAPIntegration = new LDAPIntegration();
    }
    $LDAPIntegration->setFieldFromEmail($account->mail, 'sn', $full_name);
    $profileUpdated = TRUE;
  }

  // if phone nb change: save local + LDAP
  if(property_exists($account, 'field_telephone_number') && $account->field_telephone_number[LANGUAGE_NONE][0]['value'] != $contact_num) {
    $updatedFields = array();
    $updatedFields['field_telephone_number'][LANGUAGE_NONE][0]['value'] = $contact_num;
    user_save($account, $updatedFields);
    // drupal_set_message('Customer Contact Number updated to: '.$updatedFields['field_telephone_number'][LANGUAGE_NONE][0]['value'], 'notice');
    if(!$LDAPIntegration) {
      $LDAPIntegration = new LDAPIntegration();
    }
    $LDAPIntegration->setFieldFromEmail($account->mail, 'telephonenumber', $updatedFields['field_telephone_number'][LANGUAGE_NONE][0]['value']);
    $profileUpdated = TRUE;
  }

  if($profileUpdated) {
    drupal_set_message('User Profile Settings have been updated with the Contact Details you provided', 'notice');
  }

  // Customer Group
  // determine context of ticket creation: indirect customer, etc
  if(array_key_exists('__cg__', $form_state['values']) && strlen($form_state['values']['__cg__'])) {
    $ChosenCustomerGroupNID = $form_state['values']['__cg__'];
  } else {
    $ChosenCustomerGroupNID = $form_state['values']['cg'];
  }
  $ChosenCustomerGroupNode = get_group_data_from_nid($user, $ChosenCustomerGroupNID);
  // search for partner account (if any)
  $partner_company = NULL;
  $partner_company_CustomerAccountNid = PartnerCustomerAccountFromCustGroup($user, $ChosenCustomerGroupNID);
  if($partner_company_CustomerAccountNid) {
    $partner_company_CustomerAccount = get_account_data_from_nid($user, $partner_company_CustomerAccountNid);
    $partner_company = $partner_company_CustomerAccount['jira_partner'];
  }
  // add this target client - will not be duplicated anyway on the server
  if(array_key_exists(BTI_cleanFormField(FORM_FIELD_TARGET_CLIENT), $form_state['input']) && strlen($form_state['input'][BTI_cleanFormField(FORM_FIELD_TARGET_CLIENT)])) {
    AddTargetClient($ChosenCustomerGroupNID, urlencode($form_state['input'][BTI_cleanFormField(FORM_FIELD_TARGET_CLIENT)]));
    // update local image of group data
    GetUserAccountGroupData($user->uid, $user->mail, TRUE);
  }
  $originator=$ChosenCustomerGroupNode['jira_originator']; // group name
  $customer_company=$ChosenCustomerGroupNode['jira_customer']; // account name

  $AssignedCustomerGroups = AssignedCustomerGroups($user, EDIT_GROUP_ACCESS);
  $icList = buildInCountryArray($AssignedCustomerGroups[$ChosenCustomerGroupNID]);
  //
  // Start ticket creation

  $ticketingService = getTicketingService();
  $ticketID = $ticketingService->create_ticket(
    $originator,
    $customer_company,
    $partner_company,
    $title,
    $severity,
    $priority,
    $details,
    $product_solution,
    $component,
    $version,
    $platform,
    $problem_category,
    $system,
    BTI_cleanFormField($customer_name),
    $user->mail,
    BTI_cleanFormField($contact_num),
    $ext_tracking_num,
    BTI_text2csvList(BTI_cleanFormField($recipient_list)),
    !empty($form_state['values']['contact_preferences']['in_country']['select'])?$icList[$form_state['values']['contact_preferences']['in_country']['select']]:null, // incountry support
    null// end customer name
  );
  if($ticketID) {
    BTI_log_ticket_creation($ticketID);
    // handle file attachments
    // $ticketingService->attach_file
    // if there were files attached, send them one by one to the ticketing system
    $allAttachments = $_SESSION['ticket_attachments']['new'];
    foreach($allAttachments as $fid => $filename) {
      $file = file_load($fid);
      if(!$ticketingService->attach_file($ticketID, drupal_realpath($file->uri), $filename)) {
        drupal_set_message('File Attachment Error occured for file '.$file->filepath, 'error');
        // add log about this failure
      }
      else {
        // Remove file from our server
        file_delete($file);
      }
      // unset this file from session variable
      unset($_SESSION['ticket_attachments']['new'][$fid]);
    }
    $form_state['saved_ticket'] = $ticketID;
    $form_state['rebuild'] = TRUE;
    // custom hook after ticket created
    module_invoke_all('broadsoft_ticket_created', $ticketID);
  }
  else {
    $form_state['saved_ticket'] = -1;
  }

}

function broadsoft_ticketing_search_api_autocomplete_types() {
  $types = array();
  $types['broadsoft_ticketing'] = array(
    'name' => t('Broadsoft Ticketing Search'),
    'description' => t('Searches provided by the Broadsoft Ticketing module.'),
    'list searches' => 'broadsoft_ticketing_list_autocomplete_searches',
    'create query' => 'broadsoft_ticketing_create_autocomplete_query',
    // OPTIONAL – only if you want additional search-specific options, like for Views:
    //'config form' => 'MODULE_autocomplete_config_form',
  );

  return $types;
}

function broadsoft_ticketing_list_autocomplete_searches(SearchApiIndex $index) {
  $ret = array();
  // If your module only provides one search, it's simple:
  $ret['broadsoft_ticketing']['name'] = t('Broadsoft Ticketing search');
  return $ret;
}

function broadsoft_ticketing_create_autocomplete_query(SearchApiAutocompleteSearch $search, $complete, $incomplete) {
  $query = search_api_query($search->index_id);
  //$query = broadsoft_ticketing_create_query($search->options['custom']);
  $query->keys($complete);
  return $query;
}

function ticketing_existing_form($form, &$form_state, $ticketID = NULL)
{
  $form = array();

  if (blockTicketingOFFLINE()) {
    return;
  }

  if ($ticketID == NULL) {
    return NULL;
  }

  global $user;

    if(!(userIsAdministrator()||bsutil_user_has_role(ROLE_TICKETING_ADMIN, $user)||bsutil_user_has_role(ROLE_TICKETING_VIEWER, $user)||bsutil_user_has_role(ROLE_TICKETING_EDITOR, $user)))  {
      /*drupal_set_message('You do not have permission to perform this action!', 'error');
      drupal_goto('ticketing');
      return;*/
    }

    // get ticket data using generic account - check access later on
    $ticketingService = getTicketingService();
    $ticket = $ticketingService->getTicket($ticketID);
    if(!$ticket) {
      drupal_set_message('Ticket ID '.$ticketID.' does not exist.', 'warning');
      drupal_goto('ticketing');
      return;
    }else {
      $ticketID = $ticket->getID();
    }

    if(!user_can_access_ticket($user, $ticket, VIEW_GROUP_ACCESS)) {
      drupal_set_message('You do not have access to Ticket ID '.$ticketID, 'warning');
      drupal_goto('ticketing');
      return;
    }

    if(user_can_access_ticket($user, $ticket, EDIT_GROUP_ACCESS)) {
      $viewONLY = FALSE;
    } else {
      $viewONLY = TRUE;
    }

    if($ticket->isClosed()) {
      $viewONLY = TRUE;
    }

    $form = array();
  if($ticketID!=NULL) {
    // Reset attachment array on form init
    // Some entries might be here on errors or
    // form cancel after attachment upload
    if(isset($_SESSION['ticket_attachments']['existing']) && count($_SESSION['ticket_attachments']['existing']) > 0) {
      $_SESSION['ticket_attachments']['existing'] = array();
    }
  }
    $form['#view_only'] = $viewONLY;
    $form['#is_pending_cus'] = $ticket->isPendingCustomer();
    $form['#attributes'] = array('enctype' => "multipart/form-data"); // required for proper file attachments processing
    $form['ticketID'] = array( '#type' => 'hidden', '#attributes' => array('id' => 'ticketID'), '#value' => $ticketID);
    $form['transitions'] = array( '#type' => 'hidden','#attributes' => array('id' => 'transitionsID'), '#value' => json_encode($ticketingService->getAvailableTransitionsNumbers($ticket->getTransitions())));
    $form_state['ticketid'] = $ticketID;
    // Adding required variables
    $form['#title'] = $ticket->getTitle();
    $form['#severity'] = $ticket->getSeverity();
    $form['#status'] = $ticket->getStatus();
    $form['#priority'] = $ticket->getCustomerPriority();
    $ChangeHistoryArr = $ticket->getChangeHistory();
    $form['#updates'] = $ChangeHistoryArr;
    $form['#description'] = $ticket->getDescription();

    $form['#product'] = ticketing_options_idtovalue($ticket->getProductMain(), 'PRODUCT_MAIN');
    $form['#solution'] = ticketing_options_idtovalue($ticket->getProductCategory(), 'PRODUCT_CATEGORY');
    $form['#version'] = ticketing_options_idtovalue($ticket->getRelFound(), 'REL_FOUND');
    $form['#component'] = ticketing_options_idtovalue($ticket->getComponent(), 'COMPONENT');
    $form['#system_type'] = ticketing_options_idtovalue($ticket->getSystemType(), 'SYSTEM_TYPE');
    $form['#platform'] = ticketing_options_idtovalue($ticket->getPlatform(), 'PLATFORM');

    $form['#cname'] = $ticket->getContactName();
    $form['#cphone'] = $ticket->getContactPhoneNumber();
    $form['#in_country'] = $ticket->getInCountry();
    $form['#emails'] = $ticket->getEmailNotificationList();

    $form['#created_date'] = $ticket->getCreationDate();
    $form['#first_response'] = $ticket->getFirstResponseDate();
    $form['#last_modified'] = $ticket->getLastModifiedDate();
    $form['#resolved_date'] = $ticket->getResolvedDate();

    $form['#attachments'] = $ticket->getAttachmentArr();

      // TODO from existing
    if($curAssignee = $ticket->getOwner()) {
      $xuid = mapXchangeUser($ticket->getOwner(), $isFromBroadSoft);
      if($xuid) {
        //$form[$div_ID]['markup'.$markupID++] = makeMarkupElement('&nbsp&nbsp-&nbsp&nbspassigned to: ');
        //$form[$div_ID]['markup'.$markupID++] = makeMarkupElement('<FONT color="'.BROADSOFT_TURQUOISE_COLOR.'" title="Current Assignee"><a target="_blank" href="'.bs_get_site_base_path().'user/'.$xuid.'">'.$curAssignee.'</a></FONT>');
      }
    }

  if(!$viewONLY) {
    drupal_add_js(array('broadsoft_ticketing' => array('upload_path' => base_path() . 'ticketing/ticket/upload')), array('type' => 'setting'));
    $form['attachments'] = array(
      '#type' => 'container',
      '#title_display' => 'hidden',
      '#name' => 'edropzone',
      '#theme_wrappers' => array('dropzone_attachment_container'),
      '#attributes' => array('class' => array('fileUpload')),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'broadsoft_ticketing') . '/js/dropzone.js' => array('type' => 'file'),
        )
      ),
    );

    $form['save_attachments'] = array(
      '#type' => 'submit',
      '#value' => t('Save Attachments'),
      '#name' => 'save_attachments',
      '#attributes' => array('class' => array('fileUpload')),
      '#submit' => array('existing_save_attachment_submit'),
      /*'#ajax' => array(
        'callback' => 'update_close_callback',
        'wrapper' => 'confirm-modal'
      ),*/
      '#limit_validation_errors' => array(),
    );

    $form['update'] = array(
      '#type' => 'textarea',
      '#attributes' => array('class' => array('bsTextarea')),
      '#placeholder' => t('Enter an Update...'),
      '#required' => TRUE,
    );
    if(!$ticket->isNew()) {
      $form['update_pending'] = array(
        '#type' => 'submit',
        '#value' => !$form['#is_pending_cus'] ? t('Update to Pending Customer') : t('Update & Return to TAC'),
        '#name' => 'update_pending',
        '#attributes' => array('class' => array('btn type-none-background color-green')),
        /*'#ajax' => array(
          'callback' => 'update_close_callback',
          'wrapper' => 'confirm-modal'
        ),*/
        '#submit' => array('update_pending_submit_callback'),
      );
    }

    $form['update_close'] = array(
      '#type' => 'submit',
      '#value' => t('Update & Close Ticket'),
      '#name' => 'update_close',
      '#attributes' => array('class' => array('btn type-none-background color-green')),
      '#ajax' => array(
        'callback' => 'update_close_callback',
        'wrapper' => 'confirm-modal'
      ),
      '#submit' => array('update_close_submit_callback'),
    );

    $form['cancel_update'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#name' => 'cancel_update',
      '#attributes' => array('class' => array('btn background-3')),
      '#submit' => array('cancel_update_submit_callback'),
      '#limit_validation_errors' => array(),
    );

    $form['send_update'] = array(
      '#type' => 'submit',
      '#value' => t('Update Ticket'),
      '#name' => 'send_update',
      '#attributes' => array('class' => array('btn background-4')),
      /*'#ajax' => array(
        'callback' => 'update_close_callback',
        'wrapper' => 'confirm-modal'
      ),*/
      '#submit' => array('send_update_submit_callback'),
    );
  }
  if(empty($form_state['confirm_update'])) {
    $form_state['confirm_update'] = FALSE;
  }

  // Close ticket confirm modal
  $form['modal_confirm'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="confirm-modal">',
    '#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array('confirm_modal_fieldset'),
  );
  if($form_state['confirm_update']) {
    $form['modal_confirm']['confirm'] = array(
      '#type' => 'submit',
      '#name' => 'uconfirm',
      '#value' => t('YES Close the ticket!'),
      '#ajax' => array(
        'callback' => 'confirm_close_callback',
      ),
      '#submit' => array('confirm_close_submit_callback'),
    );
  }

  if(empty($form_state['show_feedback'])) {
    $form_state['show_feedback'] = FALSE;
  }
  // Feedback modal after closing ticket
  $form['modal_feedback'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="feedback-modal">',
    '#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array('feedback_modal_fieldset'),
  );
  if($form_state['show_feedback']) {
    $form['modal_feedback']['ticid'] = array(
      '#type' => 'hidden',
      '#value' => $ticketID,
    );
    $form['modal_feedback']['fb_dismiss'] = array(
      '#type' => 'submit',
      '#value' => '',
      '#name' => 'fb_dismiss',
      '#attributes' => array('class' => array('bsModal__close'), 'data-dismiss' => 'modal', 'aria-hidden'=> 'true'),
      '#ajax' => array(
        'callback' => 'no_thanks_callback',
      ),
      '#submit' => array('no_thanks_submit_callback'),
    );
    $form['modal_feedback']['satisfaction'] = array(
      '#type' => 'radios',
      '#options' => array(
        'verySatisfied' => t('Very Satisfied - Exceeded my expectations'),
        'metExpectations' => t('Satisfied - Met my expectations'),
        'mostlyMetExpectations' => t('Neutral - Mostly met my expectations'),
        'Unsatisfied' => t('Unsatisfied - Did not meet my expectations'),
      ),
      '#default_value' => 'verySatisfied',
      '#attributes' => array('class' => array('radio-group-control')),
      '#theme_wrappers' => array('feedback_radios'),
    );
    $form['modal_feedback']['comments'] = array(
      '#type' => 'textarea',
      '#size' => 4,
    );

    $form['modal_feedback']['no_thanks'] = array(
      '#type' => 'submit',
      '#value' => t('No Thanks'),
      '#name' => 'no_thanks',
      '#ajax' => array(
        'callback' => 'no_thanks_callback',
      ),
      '#submit' => array('no_thanks_submit_callback'),
      '#attributes' => array('class' => array('ticket__submit', 'ticket__submit-text', 'ticket__submit', 'no-button')),
    );
    $form['modal_feedback']['fb_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#name' => 'fb_submit',
      '#ajax' => array(
        'callback' => 'feedback_callback',
      ),
      '#submit' => array('feedback_submit_callback'),
      '#attributes' => array('class' => array('ticket__submit', 'ticket__submit-text', 'ticket__submit')),
    );
  }

  // Success thank you modal
  if(empty($form_state['show_thankyou'])) {
    $form_state['show_thankyou'] = FALSE;
  }
  $form['modal_thankyou'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="thankyou-modal">',
    '#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array('thankyou_modal_fieldset'),
  );
  if($form_state['show_thankyou']) {
    $form['modal_thankyou']['ty_dismiss'] = array(
      '#type' => 'submit',
      '#value' => '',
      '#name' => 'ty_dismiss',
      '#attributes' => array('class' => array('bsModal__close'), 'data-dismiss' => 'modal', 'aria-hidden' => 'true'),
      '#ajax' => array(
        'callback' => 'success_exit_callback',
      ),
    );
  }

  drupal_add_js(
    '(function ( $ ) {
    Drupal.ajax.prototype.commands.confirmClose = function(ajax, response, status) {
      showModal("confirmClose");
    }
    Drupal.ajax.prototype.commands.confirmFeedback = function(ajax, response, status) {
      hideModal("confirmClose");
      showModal("tacClosed");
    }
    Drupal.ajax.prototype.commands.closeFeedback = function(ajax, response, status) {
      hideModal(response.name);
    }
    Drupal.ajax.prototype.commands.submitFeedback = function(ajax, response, status) {
      hideModal("tacClosed");
      showModal("alertClose");
    }
    var hideInProgress = false;
var showModalId = "";

function showModal(elementId) {
    if (hideInProgress) {
        showModalId = elementId;
    } else {
        $("#" + elementId).modal("show");
    }
};

function hideModal(elementId) {
    hideInProgress = true;
    $("#" + elementId).on(\'hidden.bs.modal\', hideCompleted);
    $("#" + elementId).modal("hide");

    function hideCompleted() {
        hideInProgress = false;
        if (showModalId) {
            showModal(showModalId);
        }
        showModalId = \'\';
        $("#" + elementId).off(\'hidden.bs.modal\');
    }
};
    }( jQuery ));',
    'inline'
  );

  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'broadsoft_ticketing').'/js/broadsoft_ticketing.js' => array('type' => 'file'),
    )
  );

  return $form;

}

function update_close_callback($form, &$form_state) {
  $errors = form_get_errors();
  $commands = array();
  if($errors) {
    foreach ($errors as $e => $v) {
      if (strpos($e, 'update') !== false) {
        $commands[] = ajax_command_invoke('.ticket-infor-block .bsTextareaWrapper', 'addClass', array('required'));
      }
    }
  }
  else {
    $commands[] = ajax_command_replace('#confirm-modal', drupal_render($form['modal_confirm']));
    $commands[] = array("command" => 'confirmClose',);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function update_close_submit_callback($form, &$form_state) {
  $form_state['confirm_update'] = TRUE;
  $form_state['rebuild'] = TRUE;
}

function send_update_submit_callback($form, &$form_state) {
  global $user;
  $ticketingService = getTicketingService();
  $ticketID = $form['ticketID']['#value'];
  $updateArr = array();
  if(strlen($form_state['values']['update'])) {
    if(variable_get('ticketing_embed_xchange_uid_into_updates', FALSE)) {
      $embededXUID = '[xuid:'.$user->uid.';email:'.$user->mail.']';
      $updateArr[Ticket::getIssueUpdateTag()] = $embededXUID."\n".$form_state['values']['update'];
    } else {
      $updateArr[Ticket::getIssueUpdateTag()] = $form_state['values']['update'];
    }
    $ticketID = $ticketingService->update_ticket($ticketID, $updateArr,$updateArr);
  }
}

function update_pending_submit_callback($form, &$form_state) {
  global $user;
  $ticketingService = getTicketingService();
  $ticketID = $form['ticketID']['#value'];
  $updateArr = array();
  if($form['#is_pending_cus'])
    $updateArr['STATUS'] = 'OPEN';
  else
    $updateArr['STATUS'] = 'MONITOR';
  $updateArr[Ticket::getTransitionsTag()] = urlencode($form_state['values'][Ticket::getTransitionsTag()]);
  if(strlen($form_state['values']['update'])) {
    if(variable_get('ticketing_embed_xchange_uid_into_updates', TRUE)) {
      $embededXUID = '[xuid:'.$user->uid.';email:'.$user->mail.']';
      $updateArr[Ticket::getIssueUpdateTag()] = $embededXUID.$form_state['values']['update'];
    } else {
      $updateArr[Ticket::getIssueUpdateTag()] = urlencode($form_state['values']['update']);
    }
    $ticketID = $ticketingService->update_ticket($ticketID, $updateArr,$updateArr);
  }
}

function cancel_update_submit_callback($form, &$form_state) {
  drupal_goto('ticketing');
}

function confirm_close_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#feedback-modal', drupal_render($form['modal_feedback']));
  $commands[] = array("command" => 'confirmFeedback',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function confirm_close_submit_callback($form, &$form_state) {
  // close the ticket here
  // ...
  global $user;
  $ticketingService = getTicketingService();
  $ticketID = $form['ticketID']['#value'];
  $updateArr = array();
  $updateArr['STATUS'] = 'CLOSED';
  $updateArr[Ticket::getTransitionsTag()] = urlencode($form_state['values'][Ticket::getTransitionsTag()]);
  if(strlen($form_state['values']['update'])) {
    if(variable_get('ticketing_embed_xchange_uid_into_updates', TRUE)) {
      $embededXUID = '[xuid:'.$user->uid.';email:'.$user->mail.']';
      $updateArr[Ticket::getIssueUpdateTag()] = $embededXUID.$form_state['values']['update'];
    } else {
      $updateArr[Ticket::getIssueUpdateTag()] = urlencode($form_state['values']['update']);
    }
    $ticketID = $ticketingService->update_ticket($ticketID, $updateArr,$updateArr);
  }
  //
  $form_state['confirm_update'] = FALSE;
  $form_state['show_feedback'] = TRUE;
  $form_state['rebuild'] = TRUE;
}

function no_thanks_callback($form, &$form_state) {
  $commands = array();
  $commands[] = array("command" => 'closeFeedback', 'name' => 'tacClosed');
  $commands[] = array
  (
    'command' => 'redirectUsers',
    'path' => base_path().'ticketing/ticket/'.$form['ticketID']['#value'],
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

function no_thanks_submit_callback($form, &$form_state) {
  // TODO Send email to user asking for feedback with link
  drupal_set_message("Sending mail to user for feedback");
  // ...
}

function feedback_callback($form, &$form_state) {
  $commands = array();
  $commands[] = array("command" => 'submitFeedback',);
  $commands[] = ajax_command_replace('#thankyou-modal', drupal_render($form['modal_thankyou']));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function feedback_submit_callback($form, &$form_state) {
  // Save feedback here
  // ...
  $form_state['confirm_update'] = FALSE;
  $form_state['show_feedback'] = FALSE;
  $form_state['show_thankyou'] = TRUE;
  $form_state['rebuild'] = TRUE;
}

function success_exit_callback($form, &$form_state) {
  // Successfully completed
  // Reload the ticket page
  $commands = array();
  $commands[] = array("command" => 'closeFeedback', 'name' => 'alertClose');
  $commands[] = array
  (
    'command' => 'redirectUsers',
    'path' => base_path().'ticketing/ticket/'.$form['ticketID']['#value'],
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

function existing_save_attachment_submit($form, $form_state) {
  $ticketID = $form['ticketID']['#value'];
  $ticketingService = getTicketingService();
  $allAttachments = $_SESSION['ticket_attachments']['existing'];
  foreach($allAttachments as $fid => $filename) {
    $file = file_load($fid);
    if (!$ticketingService->attach_file($ticketID, drupal_realpath($file->uri), $filename)) {
      drupal_set_message('File Attachment Error occured for file ' . $file->filepath, 'error');
      // add log about this failure
    } else {
      // Remove file from our server
      file_delete($file);
    }
    // unset this file from session variable
    unset($_SESSION['ticket_attachments']['existing'][$fid]);
  }
  drupal_set_message(t('Attachments updated for ticket').': '.$ticketID);
}

function get_outage_markup()
{
  $markup = '<div class="bsBox bsBox_align_center bsBox_color_critical">

                                        <h3 class="bsBox__title bsBox__title_color_critical">Please Call Us After Ticket Submission</h3>

                                        <table class="tablePhone">
                                            <tbody>
                                                <tr>
                                                    <td class="tablePhone__icon"><i class="fa fa-phone"></i></td>
                                                    <td class="tablePhone__country">US</td>
                                                    <td class="tablePhone__number">+1-240-364-9234</td>
                                                </tr>
                                                <tr>
                                                    <td class="tablePhone__icon"><i class="fa fa-phone"></i></td>
                                                    <td class="tablePhone__country">UK</td>
                                                    <td class="tablePhone__number">+44-28-9099-8388</td>
                                                </tr>
                                                <tr>
                                                    <td class="tablePhone__icon"><i class="fa fa-phone"></i></td>
                                                    <td class="tablePhone__country">AUS</td>
                                                    <td class="tablePhone__number">+61-2-8424-2996</td>
                                                </tr>
                                            </tbody>
                                        </table>

                                    </div>';
  return $markup;
}

function getFileForPreview($fileID, $fileName, $mimeType, $fsize) {
  if(strpos($mimeType, 'image') === false || $fsize > 200000) {
    return base_path().drupal_get_path('theme', 'mantis').'/img/file.png';
  }
  $ticketingService = getTicketingService();
  $uri = 'public://TicketAttachments/temp';
  file_prepare_directory($uri, FILE_CREATE_DIRECTORY);
  $path= drupal_realpath($uri);
  $localFileFullPath = $path.'/'.$fileName;
  $local_handle = fopen($localFileFullPath, "w");
  fwrite($local_handle, $ticketingService->get_attached_file($fileID));
  fclose($local_handle);
  return file_create_url($uri).'/'.$fileName;
}

function get_form_error_markup() {
  $markup = '<div class="bsBox_align_center">
<span class="bsBox__title bsBox__title_color_critical">Some required fields are not filled!</span>
  </div>';
  return $markup;
}

function ticketing_options_idtovalue($id, $category) {
  $dbquery = db_select('ticketing_options', 'ticketing_options')
    ->fields('ticketing_options', array('name'))
    ->condition('ticketing_options.oid', $id, '=')
    ->condition('ticketing_options.category', $category, '=');
  $name = $dbquery->execute()->fetchField();
  return $name;
}

function getVersionsFromSolution($solution_id) {
  $isCPBX = variable_get('ticketing_portal_is_cpbx', FALSE);
  $retArr = array();

  $category = TICKETING_API_RELEASE;
  if($category==TICKETING_API_RELEASE) {
    $sortOrder = 'DESC';
  }

  $components = BTI_GetAllowedOptions('COMPONENT', $solution_id);
   {
    $dbquery = db_select('ticketing_options', 'ticketing_options');
    $dbquery->join('ticketing_options_dependencies', 'ticketing_options_dependencies', 'ticketing_options_dependencies.allowed_oid=ticketing_options.oid');
    $dbresult = $dbquery->fields('ticketing_options', array('name'))
      ->fields('ticketing_options_dependencies', array('allowed_oid'))
      ->orderBy('ticketing_options.name', $sortOrder)
      ->condition('ticketing_options_dependencies.dependant_category', $category, '=')
      ->condition('ticketing_options_dependencies.oid', array_keys($components), 'IN')
      ->execute();
    if($dbresult)  {
      foreach ($dbresult as $row) {
        $retArr[$row->allowed_oid] = $row->name;
      }
    }
  }
  return $retArr;
}

function product_information_form($form, &$form_state) {
  global $user;
  $form = array();
  $form['#tree'] = TRUE;
  // Selected solution
  $form['#solution_selected'] = false;
  $selection = get_selected_solution_for_user($user);
  $class = 'title';
  if($selection) {
    $form['#solution_selected'] = $selection;
    $class .= ' selected';
  }
  // title
  $form['title'] = array(
    '#markup' => $form['#solution_selected']!=NULL ? $form['#solution_selected'] : 'My Supported Solutions <i class="fa fa-angle-up" aria-hidden="true"></i>',
    '#prefix' => '<h3 id="solution-display" class="'.$class.'">',
    '#suffix' => '</h3>',
  );
  // Existing solutions
  $form['saved_solutions'] = array(
    '#type' => 'fieldset',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  $saved_solutions = get_saved_solutions_for_user($user);
  foreach($saved_solutions as $key => $each) {
    $form['saved_solutions']['solutions'][$key.'_pre'] = array(
      '#markup' => '<div class="inner"><div class="ticket__submit-line">',
    );
    $form['saved_solutions']['solutions'][$key] = array(
      '#type' => 'submit',
      '#value' => $each,
      '#name' => $key,
      //'#prefix' => '<button class="btn type-none-background color-orange" style="position: relative;">'.
        //            '<span class="ticket__submit-text">'.$each.'</span><i class="fa fa-times" aria-hidden="true"></i>',
      //'#suffix' => '</button>',
      '#attributes' => array('class' => array('btn', 'type-none-background', 'color-orange', 'ticket__submit-text')),
      '#submit' => array('save_solution_submit_callback'),
      '#ajax' => array(
        'callback' => 'product_information_form_callback',
        'wrapper' => 'solution-display',
      ),
      '#limit_validation_errors' => array(),
    );
    $form['saved_solutions']['solutions'][$key.'_remove'] = array(
      '#type' => 'submit',
      '#value' => decode_entities('&#xf00d;'),
      '#name' => 'rem-'.$key,
      //'#prefix' => '<button class="btn type-none-background removebtn">'.
        //'<i class="fa fa-times" aria-hidden="true"></i>',
      //'#suffix' => '</button>',
      '#attributes' => array('class' => array('fa', 'btn', 'type-none-background', 'removebtn')),
      '#submit' => array('remove_solution_submit_callback'),
      '#ajax' => array(
        'callback' => 'product_information_form_callback',
      ),
      '#limit_validation_errors' => array(),
    );
    $form['saved_solutions']['solutions'][$key.'_post'] = array(
      '#markup' => '</div></div>',
    );
  }
  // Product Information
  $form['product_information'] = array(
    '#type' => 'fieldset',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  //product selection
  $form['product_information']['info_product'] = array(
    '#type' => 'fieldset',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
    '#prefix' => '<ul class="list-dropdown" id="product-info-select">',
    '#suffix' => '</ul>',
  );

  // TODO filter product category based on user group
  $product_main = array(BTI_GetAllowedOptions('PRODUCT_MAIN'));
  $form['product_information']['info_product']['product_select'] = array(
    '#type' => 'select',
    '#title' => t('Select Product'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => array_shift($product_main),
    '#prefix' => '<li class="select-style" id="info-product-main">',
    '#suffix' => '</li>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#required' => TRUE,
    '#empty_option' => t('Select Product'),
    '#ajax' => array(
      'callback' => 'info_main_product_select_callback',
      'wrapper' => 'product-solution',
    ),
  );
  if(isset($form_state['main_product']) && $form_state['main_product']!= NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['info_product']['product_select'] != $form_state['main_product']) {
      // the value is changed
      // unset dependant values
      $product_category = NULL;
      $version = NULL;
      $component = NULL;
      unset($form_state['values']['product_information']['info_product']['solution']);
      unset($form_state['values']['product_information']['info_product']['version']);
      unset($form_state['values']['product_information']['info_product']['component_select']);
    }
  }
  $main_product = isset($form_state['values']['product_information']['info_product']['product_select']) ? $form_state['values']['product_information']['info_product']['product_select'] : NULL;
  $form_state['main_product'] = $main_product;
  $form['product_information']['info_product']['solution'] = array(
    '#type' => 'select',
    '#title' => t('Select Solution'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => ($main_product != NULL) ? BTI_GetAllowedOptions('PRODUCT_CATEGORY', $main_product) : array(),
    '#prefix' => '<li class="select-style" id="info-solution">',
    '#suffix' => '</li>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#required' => TRUE,
    '#empty_option' => t('Select Solution'),
    '#ajax' => array(
      'callback' => 'info_product_solution_select_callback',
    ),
  );
  if(isset($form_state['product_category']) && $form_state['product_category'] != NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['info_product']['solution'] != $form_state['product_category']) {
      // the value is changed
      // unset dependant values
      $version = NULL;
      $component = NULL;
      unset($form_state['values']['product_information']['info_product']['version']);
      unset($form_state['values']['product_information']['info_product']['component_select']);
    }
  }
  $product_category = isset($form_state['values']['product_information']['info_product']['solution']) ? $form_state['values']['product_information']['info_product']['solution'] : NULL;
  $form_state['product_category'] = $product_category;
  $form['product_information']['info_product']['component_select'] = array(
    '#type' => 'select',
    '#title' => t('Select Component'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => ($product_category != NULL) ? BTI_GetAllowedOptions('COMPONENT', $product_category) : array(),
    '#prefix' => '<li class="select-style sub-category" id="info-component">',
    '#suffix' => '</li>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#empty_option' => t('Select Component'),
    '#ajax' => array(
      'callback' => 'info_component_select_callback',
      'wrapper' => 'product-version',
    ),
  );
  if(isset($form_state['component']) && $form_state['component'] != NULL) {
    // this means this is already set: check if it is changed
    if($form_state['values']['product_information']['info_product']['component_select'] != $form_state['component']) {
      // the value is changed
      // unset dependant values
      $version = NULL;
      unset($form_state['values']['product_information']['info_product']['version']);
    }
  }
  $component = isset($form_state['values']['product_information']['info_product']['component_select']) ? $form_state['values']['product_information']['info_product']['component_select'] : NULL;
  if($component == NULL) $solution = isset($form_state['values']['product_information']['info_product']['solution']) ? $form_state['values']['product_information']['info_product']['solution'] : NULL;
  if($component != NULL) {
    $options = array(BTI_GetAllowedOptions(TICKETING_API_RELEASE, $component));
  }
  else if($solution != NULL) {
    $options = array(getVersionsFromSolution($solution));
  }
  else {
    $options = array();
  }
  $form_state['component'] = $component;
  $form['product_information']['info_product']['version'] = array(
    '#type' => 'select',
    '#title' => t('Select Version'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => $options,
    '#prefix' => '<li class="select-style" id="info-version">',
    '#suffix' => '</li>',
    '#attributes' => array('class' => array('dropdown-toggle')),
    '#empty_option' => t('Select Version'),
    '#required' => TRUE,
    /*'#ajax' => array(
      'callback' => 'info_product_version_select_callback',
      'wrapper' => 'platform'
    ),*/
  );

  // Hide dropdowns that do not have any options(yet)
  if (empty($form_state['values']['product_information']['info_product']['product_select'])) {
    $form['product_information']['info_product']['solution']['#attributes']['class'] = array('element-hidden');
  }
  if (empty($form_state['values']['product_information']['info_product']['solution'])) {
    $form['product_information']['info_product']['component_select']['#attributes']['class'] = array('element-hidden');
  }
  if(empty($form_state['values']['product_information']['info_product']['solution'])) {
    $form['product_information']['info_product']['version']['#attributes']['class'] = array('element-hidden');
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'main-form',
    '#value' => t('Save Solution'),
    '#attributes' => array('class' => array('ticket__submit', 'ticket__submit-text')),
    '#ajax' => array(
      'callback' => 'product_information_form_callback',
    ),
    '#submit' => array('product_information_form_submit'),
  );

  return $form;
}

function info_main_product_select_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#info-solution', render($form['product_information']['info_product']['solution']));
  $commands[] = ajax_command_replace('#info-component', render($form['product_information']['info_product']['component_select']));
  $commands[] = ajax_command_replace('#info-version', render($form['product_information']['info_product']['version']));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function info_product_solution_select_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#info-component', render($form['product_information']['info_product']['component_select']));
  $commands[] = ajax_command_replace('#info-version', render($form['product_information']['info_product']['version']));
  $commands[] = array("command" => 'product_info_ss',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function info_component_select_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#info-version', render($form['product_information']['info_product']['version']));
  $commands[] = array("command" => 'product_info_ss',);
  return array('#type' => 'ajax', '#commands' => $commands);
}

function save_solution_submit_callback($form, &$form_state) {
  $selected_solution = $form_state['triggering_element']['#name'];
  global $user;
  if(isset($user->data['product_info'][$selected_solution])) {
    $user->data['product_selected'] = $selected_solution;
  }
  unset($user->data['selected_solution']);
  user_save($user);
  $form_state['values'] = array();
  $form_state['component'] = NULL;
  $form_state['product_category'] = NULL;
  $form_state['main_product'] = NULL;
  $form_state['rebuild'] = true;
}

function remove_solution_submit_callback($form, &$form_state) {
  $selected_solution = $form_state['triggering_element']['#name'];
  $selected_solution = substr($selected_solution, 4);
  global $user;
  if(isset($user->data['product_info'][$selected_solution])) {
    unset($user->data['product_info'][$selected_solution]);
    if($user->data['product_selected'] == $selected_solution && count($user->data['product_selected']) > 0) {
      $solutions = $user->data['product_info'];
      reset($solutions);
      $user->data['product_selected'] = key($solutions);
    }
    else if($user->data['product_selected'] == $selected_solution){
      $user->data['product_selected'] = NULL;
    }
  }
  user_save($user);
  $form_state['values'] = array();
  $form_state['component'] = NULL;
  $form_state['product_category'] = NULL;
  $form_state['main_product'] = NULL;
  $form_state['rebuild'] = true;
}

function product_information_form_callback($form, &$form_state) {
  $commands = array();
  $errors = form_get_errors();
  if($errors) {
    foreach ($errors as $e => $v) {
      if (strpos($e, 'product_select') !== false) {
        $commands[] = ajax_command_invoke('#info-product-main select', 'addClass', array('error'));
      }
      if (strpos($e, 'solution') !== false) {
        $commands[] = ajax_command_invoke('#info-solution select', 'addClass', array('error'));
      }
      if (strpos($e, 'version') !== false) {
        $commands[] = ajax_command_invoke('#info-version select', 'addClass', array('error'));
      }
    }
  }
  else {
    $commands[] = ajax_command_replace('#solution-display', render($form['title']));
    $commands[] = ajax_command_html('#saved-solutions', render($form['saved_solutions']));
    $commands[] = ajax_command_html('#product-info-select', render($form['product_information']['info_product']));
    $commands[] = array("command" => 'reset_product_main',);
    $commands[] = array("command" => 'reinitProductInfo',);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function product_information_form_submit($form, &$form_state) {
  // Get product info labels
  $platform_id = $form_state['values']['product_information']['info_product']['product_select'];
  $platform_label = $form['product_information']['info_product']['product_select']['#options'][$platform_id];
  $solution_id = $form_state['values']['product_information']['info_product']['solution'];
  $solution_label = $form['product_information']['info_product']['solution']['#options'][$solution_id];
  $component_id = $form_state['values']['product_information']['info_product']['component_select'];
  if(isset($component_id)) {
    $component_label = $form['product_information']['info_product']['component_select']['#options'][$component_id];
  }
  $version_id = $form_state['values']['product_information']['info_product']['version'];
  $version_label = $form['product_information']['info_product']['version']['#options'][0][$version_id];
  // save preferences
  global $user;
  // get index
  $index = 1;
  if(isset($user->data['product_info'])) {
    $solutions = $user->data['product_info'];
    end($solutions);
    $index = key($solutions)+1;
  }
  $user->data['product_info'][$index] = array(
    'platform' => array($platform_id => $platform_label),
    'solution' => array($solution_id => $solution_label),
    'component' => array($component_id => $component_label),
    'version' => array($version_id => $version_label),
  );

  if(!isset($user->data['product_selected']) || $user->data['product_selected'] <= 0) {
    // make this selection default
    $user->data['product_selected'] = $index;
  }
  user_save($user);
  $form_state['values'] = array();
  $form_state['component'] = NULL;
  $form_state['product_category'] = NULL;
  $form_state['main_product'] = NULL;
  $form_state['selected_info'] = $platform_label.' > '.$solution_label.' > '.$version_label;
  $form_state['rebuild'] = true;
}

function get_saved_solutions_for_user($cur_user, $formatted = TRUE) {
  if(!isset($cur_user->data['product_info'])) {
    return array();
  }
  else if(!$formatted) {
    return $cur_user->data['product_info'];
  }
  else {
    $saved_solutions = $cur_user->data['product_info'];
    $return = array();
    foreach($saved_solutions as $key => $solution) {
      $return[$key] = reset($solution['platform']).' > '.reset($solution['solution']).' > '.reset($solution['version']);
    }
    return $return;
  }
}

function get_selected_solution_for_user($cur_user, $formatted = TRUE) {
  if(isset($cur_user->data['product_selected']) && $cur_user->data['product_selected'] > 0) {
    if($formatted) {
      $solution = $cur_user->data['product_info'][$cur_user->data['product_selected']];
      return reset($solution['platform']).' > '.reset($solution['solution']).' > '.reset($solution['version']);
    }
    else {
      return $cur_user->data['product_info'][$cur_user->data['product_selected']];
    }
  }
  else
    return NULL;
}

/* Ticket search */
function ticket_search_form($form, &$form_state) {
  $form = array();
  global $user;
  $AssignedCustomerGroups = GetUserAccountGroupData($user->uid, $user->mail);
  if(count($AssignedCustomerGroups['groups']['view'])==0) {
    // error, in the CPBX world
    // drupal_set_message('You are not configured properly to create a ticket', 'error');
    $form['error'] = array(
      '#markup' => t('You are not configured properly to use ticket search'),
      '#prefix' => '<div class="ticket-error">',
      '#suffix' => '</div>',
    );
    return $form;
  }
  $form['group_data'] = array(
    '#type' => 'hidden',
    '#value' => $AssignedCustomerGroups['groups']['view'],
  );
  $form['search_term'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      '#name' => 'search',
    ),
    '#placeholder' => t('Search Tickets...'),
  );
  $filterArr = get_default_search_filters($user);
  $filterLabel = get_default_search_filters($user, TRUE);
  if($filterLabel) {
    $markup = '<div class="filterbar__button selected">
    <span class="btn type-none-background color-orange">'.$filterLabel.'</span>
    <i class="fa fa-angle-down" aria-hidden="true"></i>
  </div>';
  }
  else {
    $markup = '<div class="filterbar__button">
    <span>Filter</span>
    <i class="fa fa-angle-down" aria-hidden="true"></i>
  </div>';
  }
  $form['filter_button'] = array(
    '#markup' => $markup,
    '#prefix' => '<span id="filter-button open">',
    '#suffix' => '</span>',
  );
  $def_status = array();
  if(isset($filterArr['status'])) {
    foreach ($filterArr['status'] as $key => $val) {
      if ($val)
        $def_status[] = $key;
    }
  }
  $form['status'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'pending' => t('Pending'),
      'open' => t('Open'),
      'open' => t('New'),
      'closed' => t('Closed'),
    ),
    '#default_value' => $def_status,
    '#title' => t('Status'),
    '#title_display' => 'none',
    '#theme_wrappers' => array('ticket_search_checkboxes'),
  );
  $def_severity = array();
  if(isset($filterArr['severity'])) {
    foreach ($filterArr['severity'] as $key => $val) {
      if ($val)
        $def_severity[] = $key;
    }
  }
  $form['severity'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'critical' => t('Critical'),
      'major' => t('Major'),
      'minor' => t('Minor'),
      'informational' => t('Informational'),
    ),
    '#default_value' => $def_severity,
    '#title' => t('Severity'),
    '#title_display' => 'none',
    '#theme_wrappers' => array('ticket_search_checkboxes'),
  );
  $form['product'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'all_products' => t('Include All Products'),
      'all_features' => t('Include All Features'),
      'all_releases' =>  t('Include All Releases'),
    ),
    '#title' => t('Product'),
    '#title_display' => 'none',
    '#theme_wrappers' => array('ticket_search_checkboxes'),
  );
  $attach = array();
  $attach[] = isset($filterArr['has_attachments']) ? 'has_attachments' : 0;
  $form['attachments'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'has_attachments' => t('Has Attached File'),
    ),
    '#default_value' => $attach,
    '#theme_wrappers' => array('ticket_search_checkboxes'),
  );
  $form['default_filter'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'set_default' => t('Set filter as default'),
    ),
    '#theme_wrappers' => array('ticket_search_checkboxes'),
  );
  $start = '';
  if(isset($filterArr['start_date'])) {
    $myDateTime = DateTime::createFromFormat('Y/m/d', $filterArr['start_date']);
    $start = $myDateTime->format('m/d/Y');
  }
  $form['start_date'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('form-control', 'hasDatePicker'),
      'id' => 'start-date',
    ),
    '#default_value' => $start,
  );
  $end = '';
  if(isset($filterArr['end_date'])) {
    $myDateTime = DateTime::createFromFormat('Y/m/d', $filterArr['end_date']);
    $end = $myDateTime->format('m/d/Y');
  }
  $form['end_date'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('form-control', 'hasDatePicker'),
      'id' => 'end-date',
    ),
    '#default_value' => $end,
  );
  $form['search_results'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="ticket-search-results">',
    '#suffix' => '</div>',
  );
  if(isset($form_state['ticket_list'])) {
    foreach($form_state['ticket_list'] as $id => $ticket) {
      $form['search_results'][$id] = array(
        '#markup' => $ticket,
        '#theme_wrappers' => array('ticket_search_results'),
      );
    }
  }
  else if(isset($form_state['search_complete']) && $form_state['search_complete']) {
    $form['search_results']['no_res'] = array(
      '#markup' => '<span class="no-results">'.t('No results found').'</span>',
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('ticket_search_form_submit'),
    '#ajax' => array(
      'callback' => 'ticket_search_results_callback',
      'wrapper' => 'ticket-search-results',
    ),
    '#attributes' => array('class' => array('apply', 'text')),
  );
  return $form;
}

function ticket_search_results_callback($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#ticket-search-results', render($form['search_results']));
  $commands[] = ajax_command_replace('#filter-button', render($form['filter_button']));
  $commands[] = ajax_command_invoke('.filterbar__button', 'addClass', array('open'));
  $commands[] = ajax_command_invoke('.filterbar__expand', 'removeClass', array('open'));
  $commands[] = ajax_command_invoke('.load-ov', 'addClass', array('hide'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function ticket_search_form_submit($form, &$form_state) {
  $term = $form_state['values']['search_term'];
  $status = $form_state['values']['status'];
  $severity = $form_state['values']['severity'];
  $start_date = $form_state['values']['start_date'];
  $end_date = $form_state['values']['end_date'];
  $attachments = $form_state['values']['attachments'];
  if($start_date) {
    $myDateTime = DateTime::createFromFormat('m/d/Y', $start_date);
    $start_date = $myDateTime->format('Y/m/d');
  }
  if($end_date) {
    $myDateTime = DateTime::createFromFormat('m/d/Y', $end_date);
    $end_date = $myDateTime->format('Y/m/d');
  }
  global $user;
  // selected customer/group is cached on the server
  $UserTicketingPreferences = user_data(USER_DATA__TICKETING_PREFERENCES);
  if (isXchange()) {
    $ChosenCustomerGroupNode = node_load($UserTicketingPreferences['selectedCustomerGroupNid']);
    $originatorID = BTI_get_exportable_group_name($ChosenCustomerGroupNode->nid);
    $temp = node_load($ChosenCustomerGroupNode->field_customer_account[0]['nid']);
    $customerID = $temp->title . ' (' . $temp->field_cid[0]['value'] . ')';
  } else {
    $ChosenCustomerGroupNode = get_group_data_from_nid($user, array_element('selectedCustomerGroupNid', $UserTicketingPreferences));
    $originatorID = array_element('jira_originator', $ChosenCustomerGroupNode);
    $customerID = array_element('jira_customer', $ChosenCustomerGroupNode);
  }
  $filterArr['status'] = array();
  $i = 0;
  foreach($status as $k => $s) {
    if($s) {
      $filterArr['status'][preg_replace('/[^a-z\-]/', '', $k)] = TRUE;
      $i++;
    }
  }
  if($i == 0) {
    // no status selected. Select all
    foreach($status as $k => $s) {
      $filterArr['status'][preg_replace('/[^a-z\-]/', '', $k)] = TRUE;
    }
  }
  $filterArr['severity'] = array();
  $i = 0;
  foreach($severity as $key => $sev) {
    if($sev) {
      $filterArr['severity'][$key] = TRUE;
      $i++;
    }
    else {
      $filterArr['severity'][$key] = FALSE;
    }
  }
  if($i == 0) {
    // no severity filter selected. Select all
    foreach($severity as $key => $sev) {
        $filterArr['severity'][$key] = TRUE;
    }
  }
  if($attachments['has_attachments']) {
    $filterArr['has_attachments'] = TRUE;
  }
  if($start_date) {
    $filterArr['start_date'] = $start_date;
  }
  if($end_date) {
    $filterArr['end_date'] = $end_date;
  }
  if($term != '') {
    $filterArr['title'] = $term;
  }
  // if set as default filters
  if($form_state['values']['default_filter']['set_default']) {
    $user->data['ticket_search_filters'] = $filterArr;
    user_save($user);
  }
  // set group data
  foreach($form_state['values']['group_data'] as $key=>$val) {
    $filterArr['group_data'][$val['jira_originator']] = $val['jira_customer'];
  }
  $ticketingService = new drupalJiraConnector(false);
  $ticketList = $ticketingService->getTicketList($filterArr, $originatorID, $customerID, TRUE, FALSE, 0, 30, null, null, false);
  $form_state['ticket_list'] = $ticketList;
  $form_state['search_complete'] = TRUE;
  $form_state['rebuild'] = true;
}

function get_default_search_filters($user, $label=FALSE) {
  if(isset($user->data['ticket_search_filters'])) {
    if(!$label) {
      return $user->data['ticket_search_filters'];
    }
    else {
      $ret = '';
      if(isset($user->data['ticket_search_filters']['status'])) {
        foreach($user->data['ticket_search_filters']['status'] as $key => $val) {
          if($val) {
            $ret .= $key.' + ';
          }
        }
      }
      if(isset($user->data['ticket_search_filters']['severity'])) {
        foreach($user->data['ticket_search_filters']['severity'] as $key => $val) {
          if($val) {
            $ret .= $key.' + ';
          }
        }
      }
      if(isset($user->data['ticket_search_filters']['has_attachments'])) {
        $ret .= t('Attachments'). ' + ';
      }
      $ret = trim($ret, ' + ');
      if(strlen($ret) > 42)
      $ret = substr($ret, 0, 42).'...';
      return $ret;
    }
  }
  else {
    return NULL;
  }
}

/* Customer selection form */
function customer_group_selection($form, &$form_state, $force_refresh = FALSE) {
  $form = array();
  global $user;
  if(!isset($_SESSION['customer_group']) || $force_refresh) {
    $AssignedCustomerGroups = AssignedCustomerGroups($user, EDIT_GROUP_ACCESS);
    if (count($AssignedCustomerGroups) == 0) {
      // error, in the CPBX world
      //drupal_set_message('You are not configured properly to create a ticket', 'error');
      return NULL;
    }
    $groups = array();
    if (count($AssignedCustomerGroups) == 1) {
      reset($AssignedCustomerGroups); // otherwise key() below will return null
      $gid = key($AssignedCustomerGroups);
      $UserTicketingPreferences['selectedCustomerGroupNid'] = $gid;
      user_data(USER_DATA__TICKETING_PREFERENCES, $UserTicketingPreferences);
      $default = $gid;
    } else {
      // this should never occur in CPBX!!
      $gid2titles = array();
      foreach ($AssignedCustomerGroups as $gid => $data) {
        $gid2titles[$gid] = $data['title'];
      }
      $selected = user_data(USER_DATA__TICKETING_PREFERENCES);
      if (!$selected) {
        reset($AssignedCustomerGroups); // otherwise key() below will return null
        $gid = key($AssignedCustomerGroups);
        $UserTicketingPreferences['selectedCustomerGroupNid'] = $gid;
        user_data(USER_DATA__TICKETING_PREFERENCES, $UserTicketingPreferences);
      } else {
        $gid = $selected['selectedCustomerGroupNid'];
      }
      $default = $gid;
    }
    $_SESSION['customer_group']['gid_list'] = $gid2titles;
    $_SESSION['customer_group']['selected'] = $default;
  }
  else {
    $gid2titles = $_SESSION['customer_group']['gid_list'];
    $default = $_SESSION['customer_group']['selected'];
  }
  $form['customer_group_fs'] = array (
    '#type' => 'fieldset',
    '#prefix' => '<div class="dropdown-test-grp">',
    '#suffix' => '</div>',
    '#title_display' => 'hidden',
    '#theme_wrappers' => array(),
  );
  $form['customer_group_fs']['header'] = array(
    '#markup' => '<h4 class="header">'.t('Customer Company/Group').':</h4>'
  );
  $form['customer_group_fs']['customer_group'] = array(
    '#type' => 'select',
    '#title' => t('Customer Company/Group'),
    '#title_display' => 'invisible',
    '#access' => TRUE,
    '#options' => $gid2titles,
    '#prefix' => '<div class="dropdown">',
    '#suffix' => '</div>',
    '#required' => TRUE,
    '#default_value' => $default,
    '#attributes' => array(
      'class' => array('btn', 'btn-default', 'dropdown-toggle'),
      'onchange' => 'this.form.submit();',
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('customer_group_submit'),
    '#attributes' => array('class' => array('element-hidden')),
  );
  return $form;
}

function customer_group_submit($form, &$form_state) {
  $selection = $form_state['values']['customer_group'];
  $UserTicketingPreferences = array();
  $UserTicketingPreferences['selectedCustomerGroupNid'] = $selection;
  user_data(USER_DATA__TICKETING_PREFERENCES, $UserTicketingPreferences);
  // Update in ssession cache
  $_SESSION['customer_group']['selected'] = $selection;
}

function get_breadcrumb_path() {
  $path = request_path();
  $exclude = array('home', 'ticket');
  $paths = explode('/', $path);
  // special cases
  // TODO handle special cases
  if($paths[count($paths)-1] == 'patchadvisor') {
    $return = '<a href="'.base_path().'">MY DASHBOARD</a>';
    $return .= ' / <a href="'.base_path().'downloads/">Downloads</a>';
    $return .= ' / <a href="'.base_path().$path.'">Patch Advisor Tool</a>';
    return $return;
  }

  $page_path = '';
  $return = '<a href="'.base_path().'">MY DASHBOARD</a>';
  for($i = 0; $i < count($paths)-1 ; $i++) {
    $page_path .= $paths[$i].'/';
    if(!in_array($paths[$i], $exclude) && path_exists($page_path)) {
      $title =  preg_replace('/[-_]+/', ' ', $paths[$i]);
      // replace old ticketing path
      if($page_path == 'support/ticketing/')
      $return .= ' / <a href="'.base_path().'ticketing/">'.$title.'</a>';
      else
      $return .= ' / <a href="'.base_path().$page_path.'">'.$title.'</a>';
    }
  }
  if(isset($paths[count($paths)-1]) && strlen($paths[count($paths)-1]) > 0) {
    if(!in_array($paths[count($paths)-1], $exclude) && path_exists($page_path.$paths[count($paths) - 1])) {
      $return .= ' / <b>' . str_replace(' ', '-', preg_replace('/[-_]+/', ' ', $paths[count($paths) - 1])) . '</b>';
    }
  }
  return $return;
}

function path_exists($path) {
  $path = trim($path,'/');
  $result = db_query('SELECT * FROM {menu_router} WHERE path = :path', array(':path' => $path));
  foreach ($result as $router) {
    if ($router->page_callback === 'page_manager_page_execute') {
      return true;
    }
  }
  if(drupal_valid_path($path) == 1) return true;
  return false;
}

function ticketing_preferences_form($form, $form_state) {
  global $user;
  $form = array();
  $form['pref'] = array(
    '#type' => 'fieldset',
    '#description' => t('Open the ticket creation form ADD A TICKET in').':',
  );
  $form['pref']['new_form'] = array(
    '#type' => 'radios',
    '#options' => array(
      'modal' => t('a modal pop up'),
      'tab' => t('open in a new tab'),
    ),
    '#default_value' => isset($user->data['ticket_preferences']) ? $user->data['ticket_preferences'] : 'modal',
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save Preferences'),
    '#attributes' => array('class' => array('preferences', 'ticket__submit', 'ticket__submit-text', 'ticket__submit_disabled')),
    '#submit' => array('save_preferences_submit')
  );
  return $form;
}

function save_preferences_callback($form, $form_state) {

}

function save_preferences_submit($form, $form_state) {
  global $user;
  if($user->uid==0) {
    drupal_set_message(t('You are not logged in. Unable to save preferences!'), 'warning');
    return;
  }
  $user->data['ticket_preferences'] = $form_state['values']['new_form'];
  user_save($user);
  drupal_set_message(t('User preferences saved successfully'));
}