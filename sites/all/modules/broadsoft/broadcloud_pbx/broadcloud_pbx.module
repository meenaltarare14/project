<?php

/*---------------------------------------------------------------------------------------
                                broadcloud_pbx
                                    module
                                    
*** Description: 

*** Notes: 
                                    
---------------------------------------------------------------------------------------*/
  
define("DISCOVERY_BASE_URI1", "private:\/\/from_sync\/");
define("WD_DISCOVERY", "File Discovery");

define('CPBX_FILE_DIR', "/bw/broadworks/webrepos/cPBX/from_sync");

// default values for configurable settings
define("BROADCLOUD_PBX_ENABLE_EMAIL_NOTIFICATION", FALSE);
define("BROADCLOUD_PBX_EMAIL_ADDRESS", "xchangesupport@broadsoft.com");
define("BROADCLOUD_PBX_NOTIFY_ON_CREATION", FALSE);
define("BROADCLOUD_PBX_NOTIFY_ON_UPDATE", FALSE);
define("BROADCLOUD_PBX_NOTIFY_ON_UNMANAGED", FALSE);


/** =============================================================================================
*/
function broadcloud_pbx_init() {
  // @@@ hmm, the following is not working i.e. setting the variable to true at install time...  
  //variable_set('broadcloud_pbx_discovery_enabled', TRUE); // not GUI-managed for now! Change using
}

function broadcloud_pbx_menu() {
  $items = array();

  $items['admin/config/system/broadcloud_pbx'] = array(
    'title' => 'BroadCloud PBX KB Settings',
    'description' => 'Configuration for email notification and more',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadcloud_pbx_admin_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file'=>'broadcloud_pbx.admin.inc'
  );

  return $items;
}


function broadcloud_pbx_scandir( $entryDirectory )
{
  $files = scandir($entryDirectory);
  foreach($files as $k => $file) {
    if( strcmp($file,".")!=0 && strcmp($file,"..")!=0 ) {
      if( is_file( $entryDirectory.'/'.$file ) ) {
        watchdog('BroadSoft Code', 'Scanning file ('.$file.') for File Entries', NULL, WATCHDOG_NOTICE);
        broadcloud_pbx_process1file($entryDirectory.'/'.$file);
      }
      else if( is_dir( $entryDirectory.'/'.$file ) ) {
        watchdog('BroadSoft Code', 'Scanning directory ('.$file.') for File Entries', NULL, WATCHDOG_NOTICE);
        broadcloud_pbx_scandir( $entryDirectory.'/'.$file );
      }
    }
  }
}

/** =============================================================================================
Using simple hook_cron instead of external file discovery - os level cron job
*/
function broadcloud_pbx_cron() {
  if(variable_get('broadcloud_pbx_discovery_enabled', FALSE)) { // @TODO: make GUI-configurable
    broadcloud_pbx_scandir(CPBX_FILE_DIR);
  } else
    watchdog('BroadSoft Code', 'Discovery NOT enabled (variable broadcloud_pbx_discovery_enabled)', NULL, WATCHDOG_NOTICE);
}

/** =============================================================================================
*/
function broadcloud_pbx_process1file( $filepath ) {
  // ASSERT
  if(!variable_get('broadcloud_pbx_discovery_enabled')) {
    watchdog(WD_DISCOVERY, 'Discovery is NOT enabled, aborting discovery. To change this: %> drush vset broadcloud_pbx_discovery_enabled 1', NULL, WATCHDOG_WARNING);
    return;
  }
  
  $fileTypeConfig = helper_getFileTypeConfig($filepath);
  if(!$fileTypeConfig) {
    watchdog(WD_DISCOVERY, 'Filtering out file ('.$filepath.') - skipped', NULL, WATCHDOG_WARNING);
    if( variable_get('broadcloud_pbx_Enable_Email_Notification', BROADCLOUD_PBX_ENABLE_EMAIL_NOTIFICATION) && 
        variable_get('broadcloud_pbx_Notify_On_Unmanaged', BROADCLOUD_PBX_NOTIFY_ON_UNMANAGED) ) {
      
    }
    return;
  }
    
  // Building a private file system URI
  $uri_temp = preg_replace('/\//', '\/', variable_get('file_private_path'));
  // Made it case insensitive (Windows)
  $uri = "private:/".preg_replace('/'.$uri_temp.'/i', '', $filepath);
  
  // check if already in DB
  $fileObj = helper_broadcloud_pbx_get_file_object($uri);
  if($fileObj) {
    // update if needed - based on filedisk change
    $filesizeDisk = filesize($uri);
    if($fileObj->filesize != $filesizeDisk) {
      watchdog(WD_DISCOVERY, 'Processing file ('.$filepath.'): File size has changed - updating file data in DB', NULL, WATCHDOG_DEBUG);
      helper_broadcloud_pbx_update_file($uri, $fileObj);
    }    
  } else {
    // create and send notification email
    watchdog(WD_DISCOVERY, 'Processing file ('.$filepath.'): New unknown File', NULL, WATCHDOG_DEBUG);
    helper_broadcloud_pbx_create_new_FileWrapper($uri, $fileTypeConfig);
  }  
}

/** =============================================================================================
*/
function helper_broadcloud_pbx_update_file($uri, $fileObj) {
  // update fields:
  // - filesize
  // - timestamp (set to now...)
  // - md5sum
  $filesizeDisk = filesize($uri);
  db_update('file_managed')
  ->fields(array('filesize' => $filesizeDisk, 'timestamp' => time(),))
  ->condition('fid', $fileObj->fid)
  ->execute();

  helper_broadcloud_pbx_updateMD5SUM($uri);  

  if( variable_get('broadcloud_pbx_Enable_Email_Notification', BROADCLOUD_PBX_ENABLE_EMAIL_NOTIFICATION) && 
      variable_get('broadcloud_pbx_Notify_On_Update', BROADCLOUD_PBX_NOTIFY_ON_UPDATE) ) {
    // TODO fetch the node

  }
}

/** =============================================================================================
* returns NULL if file type is not supported OR filtered out
*/
function helper_getFileTypeConfig($filepath) {
  $knownFileTypes = array(
    // following extensions: define only if default Drupal mime needs to be overriden
//@@@    'pdf'   => array('mimetype' => 'application/pdf',), 
//@@@    'txt'   => array('mimetype' => 'text/plain',), 
//@@@    'plist' => array('mimetype' => 'text/xml',), // 'application/x-plist',), 
//@@@    'dmg'   => array('mimetype' => 'application/x-apple-diskimage',), 
//@@@    'ipa'   => array('mimetype' => 'application/octet-stream',), 
//@@@    'apk'   => array('mimetype' => 'application/vnd.android.package-archive',), 
//@@@    'jad'   => array('mimetype' => 'text/vnd.sun.j2me.app-descriptor',), 
//@@@    'wml'   => array('mimetype' => 'text/vnd.wap.wml',), 
//@@@    'cod'   => array('mimetype' => 'application/vnd.rim.cod',),     
//@@@    'zip'   => array('mimetype' => 'application/zip',),         
//@@@    'png'   => array('mimetype' => 'image/png',),
  );

  $retMime = NULL;

  $path_info = pathinfo($filepath);   

  // get file extensions allowed through GUI-config for document_discovered content type  
  $entity_type = 'node';
  $field_name = 'field_attached_file';
  $bundle_name = 'document_discovered';
  $data = field_info_instance($entity_type, $field_name, $bundle_name);
  // typical value: string e.g. "jpg png txt doc docx xls xlsx pdf ppt pptx mpp zip ipa apk jad wml dmg plist cod"
  if($data && isset($data['settings']['file_extensions'])) {    
    if(preg_match('/'.$path_info['extension'].'/', $data['settings']['file_extensions'])) {
      $retMime = array('mimetype' => NULL);
    } else
      watchdog(WD_DISCOVERY, 'File is NOT allowed as per config (document_discovered allowed file extensions)', NULL, WATCHDOG_DEBUG);
  }
  
  // Override the return mime-type (If necessary)
  if(in_array($path_info['extension'], array_keys($knownFileTypes))) {
    $retMime = $knownFileTypes[$path_info['extension']];
  }

  return $retMime;
}
  
/** =============================================================================================
*/
function helper_broadcloud_pbx_get_file_object($uri) {
  
  $fid = db_query('SELECT fid FROM {file_managed} WHERE uri = :uri', array(':uri' => $uri))->fetchField();
  if (!empty($fid)) {
    $file_object = file_load($fid);
    return $file_object;
  }
  return FALSE;
}

/** =============================================================================================
*/
function helper_broadcloud_pbx_updateMD5SUM($uri) {
  $md5sum = md5_file($uri);
  
  $fileObj = reset(file_load_multiple(array(), array('uri' => $uri))); // If empty, $fileObj will be false, otherwise will contain the required file
  if($fileObj) {
    // might be for a discovered OR an uploaded file
    $record = db_select('field_data_field_attached_file', 't1')
              ->fields('t1', array('entity_id'))
              ->condition('t1.field_attached_file_fid', $fileObj->fid, '=')
              ->execute()
              ->fetchAssoc();
    
    if(!$record) {
      watchdog(WD_DISCOVERY, 'File is not associated to a node? uri ('.$uri.')', NULL, WATCHDOG_WARNING);
      return;
    }

    db_update('field_data_field_md5sum')
    ->fields(array('field_md5sum_value' => $md5sum,))
    ->condition('entity_id', $record['entity_id'])
    ->execute();

    watchdog(WD_DISCOVERY, 'Updated md5sum for file ('.$uri.'), node ('.$record['entity_id'].'), m5sum='.$md5sum, NULL, WATCHDOG_DEBUG);
  }
}


/** =============================================================================================
*/
function helper_broadcloud_pbx_create_new_FileWrapper($uri, $fileTypeConfig) {
  $now = time();
  $publish = FALSE; // dflt case, but possibly modified below
  $authorUID = 1;   // bwadmin

  // detect if coming from from_sync or ftp dir
  $DISCOVERY_BASE_URI = DISCOVERY_BASE_URI1; // dflt case
    
  $dirIdentifier = preg_replace('/\/.*/', '', preg_replace('/'.$DISCOVERY_BASE_URI.'/', '', $uri));
  
  // verify if file is already known based on md5sum
  $record = db_select('field_data_field_md5sum', 't1')
            ->fields('t1', array('entity_id'))
            ->condition('t1.field_md5sum_value', md5_file($uri), '=')
            ->execute()
            ->fetchAssoc();
  if($record) {
    watchdog(WD_DISCOVERY, 'File duplication detected (same md5sum): existing nid ('.$record['entity_id'].'), new uri ('.$uri.') - skipped', NULL, WATCHDOG_WARNING);
    $msgArr = array();
    $msgArr[] = '-  SKIPPING FILE - ';
    $msgArr[] = 'File duplication detected (same md5sum)';
    $msgArr[] = 'existing nid is: '.$record['entity_id'].'';
    $msgArr[] = 'new file uri is: '.$uri.'';
    $msgArr[] = '-  SKIPPING FILE - ';
    
    if( variable_get('broadcloud_pbx_Enable_Email_Notification', BROADCLOUD_PBX_ENABLE_EMAIL_NOTIFICATION) && 
        variable_get('broadcloud_pbx_Notify_On_Unmanaged', BROADCLOUD_PBX_NOTIFY_ON_UNMANAGED) ) {
      
    }
    return;
  }    
  
  if(bsutil_iscPBXSite()) {
    // TODO Handle the auto-publish option (non existing right now)
  }

  // 1 ......... node creation ......... 
  $extracted_title = drupal_basename($uri);
  $extracted_body = "Requires an EDIT: This is a container node for file ".drupal_basename($uri);

  $node = new stdClass();  
	$node->status = $publish;
	$node->created = $now;
	$node->uid = $authorUID;
	$node->title = $extracted_title;
	$node->promote = 0;
	$node->sticky = 0;
  $node->language = 'und';
  $node->comment = 0;
  $node->body[$node->language][0]['value'] = $extracted_body;
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->type = 'document_discovered';

  node_object_prepare($node);
  $node = node_submit($node);  
  node_save($node); 
  
  // Send an email notification
  watchdog(WD_DISCOVERY, 'Created node ('.$node->nid.') for discovered file ('.$uri.')', NULL, WATCHDOG_DEBUG);

  // email will go through another hook
  // 2 ......... Attach File ......... 
  $fileTmp = new stdClass();
  $fileTmp->fid = NULL;
  $fileTmp->uri = $uri;
  $fileTmp->filename = drupal_basename($uri);
  $fileTmp->filesize = filesize($uri);
  if($fileTypeConfig['mimetype']) // maybe NULL: means to let Drupal decide
    $fileTmp->filemime = $fileTypeConfig['mimetype'];
  else
    $fileTmp->filemime = file_get_mimetype($uri); // let Drupal decide
  $fileTmp->uid = $authorUID;
  $fileTmp->status = FILE_STATUS_PERMANENT;
  $fileTmp->timestamp = $now;
  $fileTmp->origname = drupal_basename($uri);   
  // $fileObj = file_save($fileTmp);  // this would be the preferred way, but it moves the file, which is no good!
  // so, forced to tweak things a bit:
  drupal_write_record('file_managed', $fileTmp); 
  // get back fid from what was written  
  $record = db_select('file_managed', 'file_managed')
            ->fields('file_managed', array('fid'))
            ->condition('file_managed.uri', $uri, '=')
            ->execute()
            ->fetchAssoc();
  if(!$record) {
    watchdog(WD_DISCOVERY, 'File Wrapper creation error', NULL, WATCHDOG_ERROR);
    return;
  }
  $fileObj = file_load($record['fid']);  
  
  $node->field_attached_file[$node->language][] = array(
    'fid' => $fileObj->fid,
    'filename' => $fileObj->filename,
    'filemime' => $fileObj->filemime,
    'uid' => $authorUID,
    'uri' => $fileObj->uri,
    'status' => 1,
    'display' => 1
  );  
  node_save($node); 
  helper_broadcloud_pbx_updateMD5SUM($uri);
  
}



function broadcloud_pbx_node_insert($node) {
  if( variable_get('broadcloud_pbx_Enable_Email_Notification', BROADCLOUD_PBX_ENABLE_EMAIL_NOTIFICATION) && 
      variable_get('broadcloud_pbx_Notify_On_Creation', BROADCLOUD_PBX_NOTIFY_ON_CREATION) ) {
    broadcloud_pbx_send_update_email($node, FILE_CREATION);
  }   
}

function broadcloud_pbx_send_update_email($node, $action)
{
  $msgArr = array();
  $msgArr[] = '-  UPDATING NODE - ';
  $msgArr[] = 'creating nid: '.$node->nid.'';
  $msgArr[] = 'file uri is: '.$uri.'';
  $msgArr[] = '-  UPDATING NODE - ';
}

function broadcloud_pbx_node_update($node) {
  if( variable_get('broadcloud_pbx_Enable_Email_Notification', BROADCLOUD_PBX_ENABLE_EMAIL_NOTIFICATION) && 
      variable_get('broadcloud_pbx_Notify_On_Update', BROADCLOUD_PBX_NOTIFY_ON_UPDATE) ) {
    broadcloud_pbx_send_update_email($node, FILE_UPDATE);
  }   
}


?>
